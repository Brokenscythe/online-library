
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type usersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "users"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    username: string
    fullname: string
    email: string
    password: string
    JMBG: string
    remember_token: string | null
    photo: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["users"]>
  composites: {}
}

/**
 * Model users
 * 
 */
export type users = runtime.Types.DefaultSelection<usersPayload>
export type authorsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "authors"
  objects: {
    book_authors: book_authorsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
  }, ExtArgs["result"]["authors"]>
  composites: {}
}

/**
 * Model authors
 * 
 */
export type authors = runtime.Types.DefaultSelection<authorsPayload>
export type categoriesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "categories"
  objects: {
    book_categories: book_categoriesPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
  }, ExtArgs["result"]["categories"]>
  composites: {}
}

/**
 * Model categories
 * 
 */
export type categories = runtime.Types.DefaultSelection<categoriesPayload>
export type booksPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "books"
  objects: {
    bindings: bindingsPayload<ExtArgs>
    formats: formatsPayload<ExtArgs> | null
    languages: languagesPayload<ExtArgs>
    publishers: publishersPayload<ExtArgs>
    book_authors: book_authorsPayload<ExtArgs>[]
    book_categories: book_categoriesPayload<ExtArgs>[]
    covers: coversPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    title: string
    summary: string
    year: string
    bindingId: number
    formatId: number | null
    languageId: number
    publisherId: number
  }, ExtArgs["result"]["books"]>
  composites: {}
}

/**
 * Model books
 * 
 */
export type books = runtime.Types.DefaultSelection<booksPayload>
export type book_categoriesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "book_categories"
  objects: {
    book: booksPayload<ExtArgs>
    categorie: categoriesPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    bookId: number
    cathegorieId: number
  }, ExtArgs["result"]["book_categories"]>
  composites: {}
}

/**
 * Model book_categories
 * 
 */
export type book_categories = runtime.Types.DefaultSelection<book_categoriesPayload>
export type book_authorsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "book_authors"
  objects: {
    book: booksPayload<ExtArgs>
    author: authorsPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    bookId: number
    authorId: number
  }, ExtArgs["result"]["book_authors"]>
  composites: {}
}

/**
 * Model book_authors
 * 
 */
export type book_authors = runtime.Types.DefaultSelection<book_authorsPayload>
export type coversPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "covers"
  objects: {
    book: booksPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    url: string
    booksId: number
  }, ExtArgs["result"]["covers"]>
  composites: {}
}

/**
 * Model covers
 * 
 */
export type covers = runtime.Types.DefaultSelection<coversPayload>
export type bindingsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "bindings"
  objects: {
    book: booksPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
  }, ExtArgs["result"]["bindings"]>
  composites: {}
}

/**
 * Model bindings
 * 
 */
export type bindings = runtime.Types.DefaultSelection<bindingsPayload>
export type formatsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "formats"
  objects: {
    book: booksPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
  }, ExtArgs["result"]["formats"]>
  composites: {}
}

/**
 * Model formats
 * 
 */
export type formats = runtime.Types.DefaultSelection<formatsPayload>
export type languagesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "languages"
  objects: {
    book: booksPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
  }, ExtArgs["result"]["languages"]>
  composites: {}
}

/**
 * Model languages
 * 
 */
export type languages = runtime.Types.DefaultSelection<languagesPayload>
export type publishersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "publishers"
  objects: {
    book: booksPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
  }, ExtArgs["result"]["publishers"]>
  composites: {}
}

/**
 * Model publishers
 * 
 */
export type publishers = runtime.Types.DefaultSelection<publishersPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.authors`: Exposes CRUD operations for the **authors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authors
    * const authors = await prisma.authors.findMany()
    * ```
    */
  get authors(): Prisma.authorsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.categories`: Exposes CRUD operations for the **categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.categoriesDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.books`: Exposes CRUD operations for the **books** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.books.findMany()
    * ```
    */
  get books(): Prisma.booksDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.book_categories`: Exposes CRUD operations for the **book_categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Book_categories
    * const book_categories = await prisma.book_categories.findMany()
    * ```
    */
  get book_categories(): Prisma.book_categoriesDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.book_authors`: Exposes CRUD operations for the **book_authors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Book_authors
    * const book_authors = await prisma.book_authors.findMany()
    * ```
    */
  get book_authors(): Prisma.book_authorsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.covers`: Exposes CRUD operations for the **covers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Covers
    * const covers = await prisma.covers.findMany()
    * ```
    */
  get covers(): Prisma.coversDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.bindings`: Exposes CRUD operations for the **bindings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bindings
    * const bindings = await prisma.bindings.findMany()
    * ```
    */
  get bindings(): Prisma.bindingsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.formats`: Exposes CRUD operations for the **formats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Formats
    * const formats = await prisma.formats.findMany()
    * ```
    */
  get formats(): Prisma.formatsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.languages`: Exposes CRUD operations for the **languages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Languages
    * const languages = await prisma.languages.findMany()
    * ```
    */
  get languages(): Prisma.languagesDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.publishers`: Exposes CRUD operations for the **publishers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Publishers
    * const publishers = await prisma.publishers.findMany()
    * ```
    */
  get publishers(): Prisma.publishersDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    authors: 'authors',
    categories: 'categories',
    books: 'books',
    book_categories: 'book_categories',
    book_authors: 'book_authors',
    covers: 'covers',
    bindings: 'bindings',
    formats: 'formats',
    languages: 'languages',
    publishers: 'publishers'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'authors' | 'categories' | 'books' | 'book_categories' | 'book_authors' | 'covers' | 'bindings' | 'formats' | 'languages' | 'publishers'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      users: {
        payload: usersPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      authors: {
        payload: authorsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.authorsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<authorsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.authorsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<authorsPayload>
          }
          findFirst: {
            args: Prisma.authorsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<authorsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.authorsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<authorsPayload>
          }
          findMany: {
            args: Prisma.authorsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<authorsPayload>[]
          }
          create: {
            args: Prisma.authorsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<authorsPayload>
          }
          createMany: {
            args: Prisma.authorsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.authorsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<authorsPayload>
          }
          update: {
            args: Prisma.authorsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<authorsPayload>
          }
          deleteMany: {
            args: Prisma.authorsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.authorsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.authorsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<authorsPayload>
          }
          aggregate: {
            args: Prisma.AuthorsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAuthors>
          }
          groupBy: {
            args: Prisma.AuthorsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AuthorsGroupByOutputType>[]
          }
          count: {
            args: Prisma.authorsCountArgs<ExtArgs>,
            result: $Utils.Optional<AuthorsCountAggregateOutputType> | number
          }
        }
      }
      categories: {
        payload: categoriesPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.categoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriesPayload>
          }
          findFirst: {
            args: Prisma.categoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriesPayload>
          }
          findMany: {
            args: Prisma.categoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriesPayload>[]
          }
          create: {
            args: Prisma.categoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriesPayload>
          }
          createMany: {
            args: Prisma.categoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriesPayload>
          }
          update: {
            args: Prisma.categoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriesPayload>
          }
          deleteMany: {
            args: Prisma.categoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriesPayload>
          }
          aggregate: {
            args: Prisma.CategoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategories>
          }
          groupBy: {
            args: Prisma.CategoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesCountAggregateOutputType> | number
          }
        }
      }
      books: {
        payload: booksPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.booksFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<booksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.booksFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<booksPayload>
          }
          findFirst: {
            args: Prisma.booksFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<booksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.booksFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<booksPayload>
          }
          findMany: {
            args: Prisma.booksFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<booksPayload>[]
          }
          create: {
            args: Prisma.booksCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<booksPayload>
          }
          createMany: {
            args: Prisma.booksCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.booksDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<booksPayload>
          }
          update: {
            args: Prisma.booksUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<booksPayload>
          }
          deleteMany: {
            args: Prisma.booksDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.booksUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.booksUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<booksPayload>
          }
          aggregate: {
            args: Prisma.BooksAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBooks>
          }
          groupBy: {
            args: Prisma.BooksGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BooksGroupByOutputType>[]
          }
          count: {
            args: Prisma.booksCountArgs<ExtArgs>,
            result: $Utils.Optional<BooksCountAggregateOutputType> | number
          }
        }
      }
      book_categories: {
        payload: book_categoriesPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.book_categoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_categoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.book_categoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_categoriesPayload>
          }
          findFirst: {
            args: Prisma.book_categoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_categoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.book_categoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_categoriesPayload>
          }
          findMany: {
            args: Prisma.book_categoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_categoriesPayload>[]
          }
          create: {
            args: Prisma.book_categoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_categoriesPayload>
          }
          createMany: {
            args: Prisma.book_categoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.book_categoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_categoriesPayload>
          }
          update: {
            args: Prisma.book_categoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_categoriesPayload>
          }
          deleteMany: {
            args: Prisma.book_categoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.book_categoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.book_categoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_categoriesPayload>
          }
          aggregate: {
            args: Prisma.Book_categoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBook_categories>
          }
          groupBy: {
            args: Prisma.Book_categoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Book_categoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.book_categoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<Book_categoriesCountAggregateOutputType> | number
          }
        }
      }
      book_authors: {
        payload: book_authorsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.book_authorsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_authorsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.book_authorsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_authorsPayload>
          }
          findFirst: {
            args: Prisma.book_authorsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_authorsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.book_authorsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_authorsPayload>
          }
          findMany: {
            args: Prisma.book_authorsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_authorsPayload>[]
          }
          create: {
            args: Prisma.book_authorsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_authorsPayload>
          }
          createMany: {
            args: Prisma.book_authorsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.book_authorsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_authorsPayload>
          }
          update: {
            args: Prisma.book_authorsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_authorsPayload>
          }
          deleteMany: {
            args: Prisma.book_authorsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.book_authorsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.book_authorsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<book_authorsPayload>
          }
          aggregate: {
            args: Prisma.Book_authorsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBook_authors>
          }
          groupBy: {
            args: Prisma.Book_authorsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Book_authorsGroupByOutputType>[]
          }
          count: {
            args: Prisma.book_authorsCountArgs<ExtArgs>,
            result: $Utils.Optional<Book_authorsCountAggregateOutputType> | number
          }
        }
      }
      covers: {
        payload: coversPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.coversFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coversPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.coversFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coversPayload>
          }
          findFirst: {
            args: Prisma.coversFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coversPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.coversFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coversPayload>
          }
          findMany: {
            args: Prisma.coversFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coversPayload>[]
          }
          create: {
            args: Prisma.coversCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coversPayload>
          }
          createMany: {
            args: Prisma.coversCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.coversDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coversPayload>
          }
          update: {
            args: Prisma.coversUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coversPayload>
          }
          deleteMany: {
            args: Prisma.coversDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.coversUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.coversUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coversPayload>
          }
          aggregate: {
            args: Prisma.CoversAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCovers>
          }
          groupBy: {
            args: Prisma.CoversGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CoversGroupByOutputType>[]
          }
          count: {
            args: Prisma.coversCountArgs<ExtArgs>,
            result: $Utils.Optional<CoversCountAggregateOutputType> | number
          }
        }
      }
      bindings: {
        payload: bindingsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.bindingsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bindingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bindingsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bindingsPayload>
          }
          findFirst: {
            args: Prisma.bindingsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bindingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bindingsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bindingsPayload>
          }
          findMany: {
            args: Prisma.bindingsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bindingsPayload>[]
          }
          create: {
            args: Prisma.bindingsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bindingsPayload>
          }
          createMany: {
            args: Prisma.bindingsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.bindingsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bindingsPayload>
          }
          update: {
            args: Prisma.bindingsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bindingsPayload>
          }
          deleteMany: {
            args: Prisma.bindingsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.bindingsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.bindingsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bindingsPayload>
          }
          aggregate: {
            args: Prisma.BindingsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBindings>
          }
          groupBy: {
            args: Prisma.BindingsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BindingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.bindingsCountArgs<ExtArgs>,
            result: $Utils.Optional<BindingsCountAggregateOutputType> | number
          }
        }
      }
      formats: {
        payload: formatsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.formatsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<formatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.formatsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<formatsPayload>
          }
          findFirst: {
            args: Prisma.formatsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<formatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.formatsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<formatsPayload>
          }
          findMany: {
            args: Prisma.formatsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<formatsPayload>[]
          }
          create: {
            args: Prisma.formatsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<formatsPayload>
          }
          createMany: {
            args: Prisma.formatsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.formatsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<formatsPayload>
          }
          update: {
            args: Prisma.formatsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<formatsPayload>
          }
          deleteMany: {
            args: Prisma.formatsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.formatsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.formatsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<formatsPayload>
          }
          aggregate: {
            args: Prisma.FormatsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFormats>
          }
          groupBy: {
            args: Prisma.FormatsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FormatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.formatsCountArgs<ExtArgs>,
            result: $Utils.Optional<FormatsCountAggregateOutputType> | number
          }
        }
      }
      languages: {
        payload: languagesPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.languagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<languagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.languagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<languagesPayload>
          }
          findFirst: {
            args: Prisma.languagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<languagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.languagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<languagesPayload>
          }
          findMany: {
            args: Prisma.languagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<languagesPayload>[]
          }
          create: {
            args: Prisma.languagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<languagesPayload>
          }
          createMany: {
            args: Prisma.languagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.languagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<languagesPayload>
          }
          update: {
            args: Prisma.languagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<languagesPayload>
          }
          deleteMany: {
            args: Prisma.languagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.languagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.languagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<languagesPayload>
          }
          aggregate: {
            args: Prisma.LanguagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLanguages>
          }
          groupBy: {
            args: Prisma.LanguagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LanguagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.languagesCountArgs<ExtArgs>,
            result: $Utils.Optional<LanguagesCountAggregateOutputType> | number
          }
        }
      }
      publishers: {
        payload: publishersPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.publishersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<publishersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.publishersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<publishersPayload>
          }
          findFirst: {
            args: Prisma.publishersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<publishersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.publishersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<publishersPayload>
          }
          findMany: {
            args: Prisma.publishersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<publishersPayload>[]
          }
          create: {
            args: Prisma.publishersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<publishersPayload>
          }
          createMany: {
            args: Prisma.publishersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.publishersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<publishersPayload>
          }
          update: {
            args: Prisma.publishersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<publishersPayload>
          }
          deleteMany: {
            args: Prisma.publishersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.publishersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.publishersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<publishersPayload>
          }
          aggregate: {
            args: Prisma.PublishersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePublishers>
          }
          groupBy: {
            args: Prisma.PublishersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PublishersGroupByOutputType>[]
          }
          count: {
            args: Prisma.publishersCountArgs<ExtArgs>,
            result: $Utils.Optional<PublishersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AuthorsCountOutputType
   */


  export type AuthorsCountOutputType = {
    book_authors: number
  }

  export type AuthorsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book_authors?: boolean | AuthorsCountOutputTypeCountBook_authorsArgs
  }

  // Custom InputTypes

  /**
   * AuthorsCountOutputType without action
   */
  export type AuthorsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorsCountOutputType
     */
    select?: AuthorsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AuthorsCountOutputType without action
   */
  export type AuthorsCountOutputTypeCountBook_authorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: book_authorsWhereInput
  }



  /**
   * Count Type CategoriesCountOutputType
   */


  export type CategoriesCountOutputType = {
    book_categories: number
  }

  export type CategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book_categories?: boolean | CategoriesCountOutputTypeCountBook_categoriesArgs
  }

  // Custom InputTypes

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     */
    select?: CategoriesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountBook_categoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: book_categoriesWhereInput
  }



  /**
   * Count Type BooksCountOutputType
   */


  export type BooksCountOutputType = {
    book_authors: number
    book_categories: number
    covers: number
  }

  export type BooksCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book_authors?: boolean | BooksCountOutputTypeCountBook_authorsArgs
    book_categories?: boolean | BooksCountOutputTypeCountBook_categoriesArgs
    covers?: boolean | BooksCountOutputTypeCountCoversArgs
  }

  // Custom InputTypes

  /**
   * BooksCountOutputType without action
   */
  export type BooksCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BooksCountOutputType
     */
    select?: BooksCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BooksCountOutputType without action
   */
  export type BooksCountOutputTypeCountBook_authorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: book_authorsWhereInput
  }


  /**
   * BooksCountOutputType without action
   */
  export type BooksCountOutputTypeCountBook_categoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: book_categoriesWhereInput
  }


  /**
   * BooksCountOutputType without action
   */
  export type BooksCountOutputTypeCountCoversArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: coversWhereInput
  }



  /**
   * Count Type BindingsCountOutputType
   */


  export type BindingsCountOutputType = {
    book: number
  }

  export type BindingsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book?: boolean | BindingsCountOutputTypeCountBookArgs
  }

  // Custom InputTypes

  /**
   * BindingsCountOutputType without action
   */
  export type BindingsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BindingsCountOutputType
     */
    select?: BindingsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BindingsCountOutputType without action
   */
  export type BindingsCountOutputTypeCountBookArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: booksWhereInput
  }



  /**
   * Count Type FormatsCountOutputType
   */


  export type FormatsCountOutputType = {
    book: number
  }

  export type FormatsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book?: boolean | FormatsCountOutputTypeCountBookArgs
  }

  // Custom InputTypes

  /**
   * FormatsCountOutputType without action
   */
  export type FormatsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormatsCountOutputType
     */
    select?: FormatsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FormatsCountOutputType without action
   */
  export type FormatsCountOutputTypeCountBookArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: booksWhereInput
  }



  /**
   * Count Type LanguagesCountOutputType
   */


  export type LanguagesCountOutputType = {
    book: number
  }

  export type LanguagesCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book?: boolean | LanguagesCountOutputTypeCountBookArgs
  }

  // Custom InputTypes

  /**
   * LanguagesCountOutputType without action
   */
  export type LanguagesCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguagesCountOutputType
     */
    select?: LanguagesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LanguagesCountOutputType without action
   */
  export type LanguagesCountOutputTypeCountBookArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: booksWhereInput
  }



  /**
   * Count Type PublishersCountOutputType
   */


  export type PublishersCountOutputType = {
    book: number
  }

  export type PublishersCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book?: boolean | PublishersCountOutputTypeCountBookArgs
  }

  // Custom InputTypes

  /**
   * PublishersCountOutputType without action
   */
  export type PublishersCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishersCountOutputType
     */
    select?: PublishersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PublishersCountOutputType without action
   */
  export type PublishersCountOutputTypeCountBookArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: booksWhereInput
  }



  /**
   * Models
   */

  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    username: string | null
    fullname: string | null
    email: string | null
    password: string | null
    JMBG: string | null
    remember_token: string | null
    photo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    username: string | null
    fullname: string | null
    email: string | null
    password: string | null
    JMBG: string | null
    remember_token: string | null
    photo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    fullname: number
    email: number
    password: number
    JMBG: number
    remember_token: number
    photo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    fullname?: true
    email?: true
    password?: true
    JMBG?: true
    remember_token?: true
    photo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    fullname?: true
    email?: true
    password?: true
    JMBG?: true
    remember_token?: true
    photo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    fullname?: true
    email?: true
    password?: true
    JMBG?: true
    remember_token?: true
    photo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: UsersScalarFieldEnum[]
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    username: string
    fullname: string
    email: string
    password: string
    JMBG: string
    remember_token: string | null
    photo: string | null
    createdAt: Date
    updatedAt: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    fullname?: boolean
    email?: boolean
    password?: boolean
    JMBG?: boolean
    remember_token?: boolean
    photo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    username?: boolean
    fullname?: boolean
    email?: boolean
    password?: boolean
    JMBG?: boolean
    remember_token?: boolean
    photo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  type usersGetPayload<S extends boolean | null | undefined | usersArgs> = $Types.GetResult<usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<usersPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUnique
   */
  export interface usersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends usersFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users findFirst
   */
  export interface usersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends usersFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
  }



  /**
   * Model authors
   */


  export type AggregateAuthors = {
    _count: AuthorsCountAggregateOutputType | null
    _avg: AuthorsAvgAggregateOutputType | null
    _sum: AuthorsSumAggregateOutputType | null
    _min: AuthorsMinAggregateOutputType | null
    _max: AuthorsMaxAggregateOutputType | null
  }

  export type AuthorsAvgAggregateOutputType = {
    id: number | null
  }

  export type AuthorsSumAggregateOutputType = {
    id: number | null
  }

  export type AuthorsMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type AuthorsMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type AuthorsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type AuthorsAvgAggregateInputType = {
    id?: true
  }

  export type AuthorsSumAggregateInputType = {
    id?: true
  }

  export type AuthorsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type AuthorsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type AuthorsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AuthorsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which authors to aggregate.
     */
    where?: authorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authors to fetch.
     */
    orderBy?: Enumerable<authorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: authorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned authors
    **/
    _count?: true | AuthorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuthorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuthorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthorsMaxAggregateInputType
  }

  export type GetAuthorsAggregateType<T extends AuthorsAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthors[P]>
      : GetScalarType<T[P], AggregateAuthors[P]>
  }




  export type AuthorsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: authorsWhereInput
    orderBy?: Enumerable<authorsOrderByWithAggregationInput>
    by: AuthorsScalarFieldEnum[]
    having?: authorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthorsCountAggregateInputType | true
    _avg?: AuthorsAvgAggregateInputType
    _sum?: AuthorsSumAggregateInputType
    _min?: AuthorsMinAggregateInputType
    _max?: AuthorsMaxAggregateInputType
  }


  export type AuthorsGroupByOutputType = {
    id: number
    name: string
    _count: AuthorsCountAggregateOutputType | null
    _avg: AuthorsAvgAggregateOutputType | null
    _sum: AuthorsSumAggregateOutputType | null
    _min: AuthorsMinAggregateOutputType | null
    _max: AuthorsMaxAggregateOutputType | null
  }

  type GetAuthorsGroupByPayload<T extends AuthorsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AuthorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthorsGroupByOutputType[P]>
            : GetScalarType<T[P], AuthorsGroupByOutputType[P]>
        }
      >
    >


  export type authorsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    book_authors?: boolean | authors$book_authorsArgs<ExtArgs>
    _count?: boolean | AuthorsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["authors"]>

  export type authorsSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type authorsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book_authors?: boolean | authors$book_authorsArgs<ExtArgs>
    _count?: boolean | AuthorsCountOutputTypeArgs<ExtArgs>
  }


  type authorsGetPayload<S extends boolean | null | undefined | authorsArgs> = $Types.GetResult<authorsPayload, S>

  type authorsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<authorsFindManyArgs, 'select' | 'include'> & {
      select?: AuthorsCountAggregateInputType | true
    }

  export interface authorsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['authors'], meta: { name: 'authors' } }
    /**
     * Find zero or one Authors that matches the filter.
     * @param {authorsFindUniqueArgs} args - Arguments to find a Authors
     * @example
     * // Get one Authors
     * const authors = await prisma.authors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends authorsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, authorsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'authors'> extends True ? Prisma__authorsClient<$Types.GetResult<authorsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__authorsClient<$Types.GetResult<authorsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Authors that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {authorsFindUniqueOrThrowArgs} args - Arguments to find a Authors
     * @example
     * // Get one Authors
     * const authors = await prisma.authors.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends authorsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, authorsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__authorsClient<$Types.GetResult<authorsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Authors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorsFindFirstArgs} args - Arguments to find a Authors
     * @example
     * // Get one Authors
     * const authors = await prisma.authors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends authorsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, authorsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'authors'> extends True ? Prisma__authorsClient<$Types.GetResult<authorsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__authorsClient<$Types.GetResult<authorsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Authors that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorsFindFirstOrThrowArgs} args - Arguments to find a Authors
     * @example
     * // Get one Authors
     * const authors = await prisma.authors.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends authorsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, authorsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__authorsClient<$Types.GetResult<authorsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Authors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authors
     * const authors = await prisma.authors.findMany()
     * 
     * // Get first 10 Authors
     * const authors = await prisma.authors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authorsWithIdOnly = await prisma.authors.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends authorsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, authorsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<authorsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Authors.
     * @param {authorsCreateArgs} args - Arguments to create a Authors.
     * @example
     * // Create one Authors
     * const Authors = await prisma.authors.create({
     *   data: {
     *     // ... data to create a Authors
     *   }
     * })
     * 
    **/
    create<T extends authorsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, authorsCreateArgs<ExtArgs>>
    ): Prisma__authorsClient<$Types.GetResult<authorsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Authors.
     *     @param {authorsCreateManyArgs} args - Arguments to create many Authors.
     *     @example
     *     // Create many Authors
     *     const authors = await prisma.authors.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends authorsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, authorsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Authors.
     * @param {authorsDeleteArgs} args - Arguments to delete one Authors.
     * @example
     * // Delete one Authors
     * const Authors = await prisma.authors.delete({
     *   where: {
     *     // ... filter to delete one Authors
     *   }
     * })
     * 
    **/
    delete<T extends authorsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, authorsDeleteArgs<ExtArgs>>
    ): Prisma__authorsClient<$Types.GetResult<authorsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Authors.
     * @param {authorsUpdateArgs} args - Arguments to update one Authors.
     * @example
     * // Update one Authors
     * const authors = await prisma.authors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends authorsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, authorsUpdateArgs<ExtArgs>>
    ): Prisma__authorsClient<$Types.GetResult<authorsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Authors.
     * @param {authorsDeleteManyArgs} args - Arguments to filter Authors to delete.
     * @example
     * // Delete a few Authors
     * const { count } = await prisma.authors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends authorsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, authorsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authors
     * const authors = await prisma.authors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends authorsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, authorsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Authors.
     * @param {authorsUpsertArgs} args - Arguments to update or create a Authors.
     * @example
     * // Update or create a Authors
     * const authors = await prisma.authors.upsert({
     *   create: {
     *     // ... data to create a Authors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Authors we want to update
     *   }
     * })
    **/
    upsert<T extends authorsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, authorsUpsertArgs<ExtArgs>>
    ): Prisma__authorsClient<$Types.GetResult<authorsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorsCountArgs} args - Arguments to filter Authors to count.
     * @example
     * // Count the number of Authors
     * const count = await prisma.authors.count({
     *   where: {
     *     // ... the filter for the Authors we want to count
     *   }
     * })
    **/
    count<T extends authorsCountArgs>(
      args?: Subset<T, authorsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthorsAggregateArgs>(args: Subset<T, AuthorsAggregateArgs>): Prisma.PrismaPromise<GetAuthorsAggregateType<T>>

    /**
     * Group by Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthorsGroupByArgs['orderBy'] }
        : { orderBy?: AuthorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for authors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__authorsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    book_authors<T extends authors$book_authorsArgs<ExtArgs> = {}>(args?: Subset<T, authors$book_authorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<book_authorsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * authors base type for findUnique actions
   */
  export type authorsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authors
     */
    select?: authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authorsInclude<ExtArgs> | null
    /**
     * Filter, which authors to fetch.
     */
    where: authorsWhereUniqueInput
  }

  /**
   * authors findUnique
   */
  export interface authorsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends authorsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * authors findUniqueOrThrow
   */
  export type authorsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authors
     */
    select?: authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authorsInclude<ExtArgs> | null
    /**
     * Filter, which authors to fetch.
     */
    where: authorsWhereUniqueInput
  }


  /**
   * authors base type for findFirst actions
   */
  export type authorsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authors
     */
    select?: authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authorsInclude<ExtArgs> | null
    /**
     * Filter, which authors to fetch.
     */
    where?: authorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authors to fetch.
     */
    orderBy?: Enumerable<authorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for authors.
     */
    cursor?: authorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of authors.
     */
    distinct?: Enumerable<AuthorsScalarFieldEnum>
  }

  /**
   * authors findFirst
   */
  export interface authorsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends authorsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * authors findFirstOrThrow
   */
  export type authorsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authors
     */
    select?: authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authorsInclude<ExtArgs> | null
    /**
     * Filter, which authors to fetch.
     */
    where?: authorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authors to fetch.
     */
    orderBy?: Enumerable<authorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for authors.
     */
    cursor?: authorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of authors.
     */
    distinct?: Enumerable<AuthorsScalarFieldEnum>
  }


  /**
   * authors findMany
   */
  export type authorsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authors
     */
    select?: authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authorsInclude<ExtArgs> | null
    /**
     * Filter, which authors to fetch.
     */
    where?: authorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authors to fetch.
     */
    orderBy?: Enumerable<authorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing authors.
     */
    cursor?: authorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authors.
     */
    skip?: number
    distinct?: Enumerable<AuthorsScalarFieldEnum>
  }


  /**
   * authors create
   */
  export type authorsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authors
     */
    select?: authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authorsInclude<ExtArgs> | null
    /**
     * The data needed to create a authors.
     */
    data: XOR<authorsCreateInput, authorsUncheckedCreateInput>
  }


  /**
   * authors createMany
   */
  export type authorsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many authors.
     */
    data: Enumerable<authorsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * authors update
   */
  export type authorsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authors
     */
    select?: authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authorsInclude<ExtArgs> | null
    /**
     * The data needed to update a authors.
     */
    data: XOR<authorsUpdateInput, authorsUncheckedUpdateInput>
    /**
     * Choose, which authors to update.
     */
    where: authorsWhereUniqueInput
  }


  /**
   * authors updateMany
   */
  export type authorsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update authors.
     */
    data: XOR<authorsUpdateManyMutationInput, authorsUncheckedUpdateManyInput>
    /**
     * Filter which authors to update
     */
    where?: authorsWhereInput
  }


  /**
   * authors upsert
   */
  export type authorsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authors
     */
    select?: authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authorsInclude<ExtArgs> | null
    /**
     * The filter to search for the authors to update in case it exists.
     */
    where: authorsWhereUniqueInput
    /**
     * In case the authors found by the `where` argument doesn't exist, create a new authors with this data.
     */
    create: XOR<authorsCreateInput, authorsUncheckedCreateInput>
    /**
     * In case the authors was found with the provided `where` argument, update it with this data.
     */
    update: XOR<authorsUpdateInput, authorsUncheckedUpdateInput>
  }


  /**
   * authors delete
   */
  export type authorsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authors
     */
    select?: authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authorsInclude<ExtArgs> | null
    /**
     * Filter which authors to delete.
     */
    where: authorsWhereUniqueInput
  }


  /**
   * authors deleteMany
   */
  export type authorsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which authors to delete
     */
    where?: authorsWhereInput
  }


  /**
   * authors.book_authors
   */
  export type authors$book_authorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_authors
     */
    select?: book_authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_authorsInclude<ExtArgs> | null
    where?: book_authorsWhereInput
    orderBy?: Enumerable<book_authorsOrderByWithRelationInput>
    cursor?: book_authorsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Book_authorsScalarFieldEnum>
  }


  /**
   * authors without action
   */
  export type authorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authors
     */
    select?: authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authorsInclude<ExtArgs> | null
  }



  /**
   * Model categories
   */


  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoriesMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoriesCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    id?: true
  }

  export type CategoriesSumAggregateInputType = {
    id?: true
  }

  export type CategoriesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoriesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoriesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoriesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to aggregate.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: Enumerable<categoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type CategoriesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: categoriesWhereInput
    orderBy?: Enumerable<categoriesOrderByWithAggregationInput>
    by: CategoriesScalarFieldEnum[]
    having?: categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }


  export type CategoriesGroupByOutputType = {
    id: number
    name: string
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends CategoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type categoriesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    book_categories?: boolean | categories$book_categoriesArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["categories"]>

  export type categoriesSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type categoriesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book_categories?: boolean | categories$book_categoriesArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeArgs<ExtArgs>
  }


  type categoriesGetPayload<S extends boolean | null | undefined | categoriesArgs> = $Types.GetResult<categoriesPayload, S>

  type categoriesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<categoriesFindManyArgs, 'select' | 'include'> & {
      select?: CategoriesCountAggregateInputType | true
    }

  export interface categoriesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categories'], meta: { name: 'categories' } }
    /**
     * Find zero or one Categories that matches the filter.
     * @param {categoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriesFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, categoriesFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'categories'> extends True ? Prisma__categoriesClient<$Types.GetResult<categoriesPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__categoriesClient<$Types.GetResult<categoriesPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Categories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Types.GetResult<categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriesFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, categoriesFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'categories'> extends True ? Prisma__categoriesClient<$Types.GetResult<categoriesPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__categoriesClient<$Types.GetResult<categoriesPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Categories that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Types.GetResult<categoriesPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<categoriesPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Categories.
     * @param {categoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
    **/
    create<T extends categoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesCreateArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Types.GetResult<categoriesPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {categoriesCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categories = await prisma.categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {categoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
    **/
    delete<T extends categoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesDeleteArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Types.GetResult<categoriesPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Categories.
     * @param {categoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpdateArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Types.GetResult<categoriesPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {categoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {categoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
    **/
    upsert<T extends categoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpsertArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Types.GetResult<categoriesPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoriesCountArgs>(
      args?: Subset<T, categoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): Prisma.PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriesGroupByArgs['orderBy'] }
        : { orderBy?: CategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoriesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    book_categories<T extends categories$book_categoriesArgs<ExtArgs> = {}>(args?: Subset<T, categories$book_categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<book_categoriesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * categories base type for findUnique actions
   */
  export type categoriesFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories findUnique
   */
  export interface categoriesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends categoriesFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * categories findUniqueOrThrow
   */
  export type categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories base type for findFirst actions
   */
  export type categoriesFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: Enumerable<categoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: Enumerable<CategoriesScalarFieldEnum>
  }

  /**
   * categories findFirst
   */
  export interface categoriesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends categoriesFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * categories findFirstOrThrow
   */
  export type categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: Enumerable<categoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: Enumerable<CategoriesScalarFieldEnum>
  }


  /**
   * categories findMany
   */
  export type categoriesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: Enumerable<categoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: Enumerable<CategoriesScalarFieldEnum>
  }


  /**
   * categories create
   */
  export type categoriesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a categories.
     */
    data: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
  }


  /**
   * categories createMany
   */
  export type categoriesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: Enumerable<categoriesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * categories update
   */
  export type categoriesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a categories.
     */
    data: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
    /**
     * Choose, which categories to update.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories updateMany
   */
  export type categoriesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoriesUpdateManyMutationInput, categoriesUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoriesWhereInput
  }


  /**
   * categories upsert
   */
  export type categoriesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the categories to update in case it exists.
     */
    where: categoriesWhereUniqueInput
    /**
     * In case the categories found by the `where` argument doesn't exist, create a new categories with this data.
     */
    create: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
    /**
     * In case the categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
  }


  /**
   * categories delete
   */
  export type categoriesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter which categories to delete.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories deleteMany
   */
  export type categoriesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoriesWhereInput
  }


  /**
   * categories.book_categories
   */
  export type categories$book_categoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_categories
     */
    select?: book_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_categoriesInclude<ExtArgs> | null
    where?: book_categoriesWhereInput
    orderBy?: Enumerable<book_categoriesOrderByWithRelationInput>
    cursor?: book_categoriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Book_categoriesScalarFieldEnum>
  }


  /**
   * categories without action
   */
  export type categoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
  }



  /**
   * Model books
   */


  export type AggregateBooks = {
    _count: BooksCountAggregateOutputType | null
    _avg: BooksAvgAggregateOutputType | null
    _sum: BooksSumAggregateOutputType | null
    _min: BooksMinAggregateOutputType | null
    _max: BooksMaxAggregateOutputType | null
  }

  export type BooksAvgAggregateOutputType = {
    id: number | null
    bindingId: number | null
    formatId: number | null
    languageId: number | null
    publisherId: number | null
  }

  export type BooksSumAggregateOutputType = {
    id: number | null
    bindingId: number | null
    formatId: number | null
    languageId: number | null
    publisherId: number | null
  }

  export type BooksMinAggregateOutputType = {
    id: number | null
    title: string | null
    summary: string | null
    year: string | null
    bindingId: number | null
    formatId: number | null
    languageId: number | null
    publisherId: number | null
  }

  export type BooksMaxAggregateOutputType = {
    id: number | null
    title: string | null
    summary: string | null
    year: string | null
    bindingId: number | null
    formatId: number | null
    languageId: number | null
    publisherId: number | null
  }

  export type BooksCountAggregateOutputType = {
    id: number
    title: number
    summary: number
    year: number
    bindingId: number
    formatId: number
    languageId: number
    publisherId: number
    _all: number
  }


  export type BooksAvgAggregateInputType = {
    id?: true
    bindingId?: true
    formatId?: true
    languageId?: true
    publisherId?: true
  }

  export type BooksSumAggregateInputType = {
    id?: true
    bindingId?: true
    formatId?: true
    languageId?: true
    publisherId?: true
  }

  export type BooksMinAggregateInputType = {
    id?: true
    title?: true
    summary?: true
    year?: true
    bindingId?: true
    formatId?: true
    languageId?: true
    publisherId?: true
  }

  export type BooksMaxAggregateInputType = {
    id?: true
    title?: true
    summary?: true
    year?: true
    bindingId?: true
    formatId?: true
    languageId?: true
    publisherId?: true
  }

  export type BooksCountAggregateInputType = {
    id?: true
    title?: true
    summary?: true
    year?: true
    bindingId?: true
    formatId?: true
    languageId?: true
    publisherId?: true
    _all?: true
  }

  export type BooksAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which books to aggregate.
     */
    where?: booksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
     */
    orderBy?: Enumerable<booksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: booksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned books
    **/
    _count?: true | BooksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BooksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BooksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BooksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BooksMaxAggregateInputType
  }

  export type GetBooksAggregateType<T extends BooksAggregateArgs> = {
        [P in keyof T & keyof AggregateBooks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooks[P]>
      : GetScalarType<T[P], AggregateBooks[P]>
  }




  export type BooksGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: booksWhereInput
    orderBy?: Enumerable<booksOrderByWithAggregationInput>
    by: BooksScalarFieldEnum[]
    having?: booksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BooksCountAggregateInputType | true
    _avg?: BooksAvgAggregateInputType
    _sum?: BooksSumAggregateInputType
    _min?: BooksMinAggregateInputType
    _max?: BooksMaxAggregateInputType
  }


  export type BooksGroupByOutputType = {
    id: number
    title: string
    summary: string
    year: string
    bindingId: number
    formatId: number | null
    languageId: number
    publisherId: number
    _count: BooksCountAggregateOutputType | null
    _avg: BooksAvgAggregateOutputType | null
    _sum: BooksSumAggregateOutputType | null
    _min: BooksMinAggregateOutputType | null
    _max: BooksMaxAggregateOutputType | null
  }

  type GetBooksGroupByPayload<T extends BooksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BooksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BooksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BooksGroupByOutputType[P]>
            : GetScalarType<T[P], BooksGroupByOutputType[P]>
        }
      >
    >


  export type booksSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    summary?: boolean
    year?: boolean
    bindingId?: boolean
    formatId?: boolean
    languageId?: boolean
    publisherId?: boolean
    bindings?: boolean | bindingsArgs<ExtArgs>
    formats?: boolean | formatsArgs<ExtArgs>
    languages?: boolean | languagesArgs<ExtArgs>
    publishers?: boolean | publishersArgs<ExtArgs>
    book_authors?: boolean | books$book_authorsArgs<ExtArgs>
    book_categories?: boolean | books$book_categoriesArgs<ExtArgs>
    covers?: boolean | books$coversArgs<ExtArgs>
    _count?: boolean | BooksCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["books"]>

  export type booksSelectScalar = {
    id?: boolean
    title?: boolean
    summary?: boolean
    year?: boolean
    bindingId?: boolean
    formatId?: boolean
    languageId?: boolean
    publisherId?: boolean
  }

  export type booksInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    bindings?: boolean | bindingsArgs<ExtArgs>
    formats?: boolean | formatsArgs<ExtArgs>
    languages?: boolean | languagesArgs<ExtArgs>
    publishers?: boolean | publishersArgs<ExtArgs>
    book_authors?: boolean | books$book_authorsArgs<ExtArgs>
    book_categories?: boolean | books$book_categoriesArgs<ExtArgs>
    covers?: boolean | books$coversArgs<ExtArgs>
    _count?: boolean | BooksCountOutputTypeArgs<ExtArgs>
  }


  type booksGetPayload<S extends boolean | null | undefined | booksArgs> = $Types.GetResult<booksPayload, S>

  type booksCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<booksFindManyArgs, 'select' | 'include'> & {
      select?: BooksCountAggregateInputType | true
    }

  export interface booksDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['books'], meta: { name: 'books' } }
    /**
     * Find zero or one Books that matches the filter.
     * @param {booksFindUniqueArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends booksFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, booksFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'books'> extends True ? Prisma__booksClient<$Types.GetResult<booksPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__booksClient<$Types.GetResult<booksPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Books that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {booksFindUniqueOrThrowArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends booksFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, booksFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__booksClient<$Types.GetResult<booksPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksFindFirstArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends booksFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, booksFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'books'> extends True ? Prisma__booksClient<$Types.GetResult<booksPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__booksClient<$Types.GetResult<booksPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Books that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksFindFirstOrThrowArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends booksFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, booksFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__booksClient<$Types.GetResult<booksPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.books.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.books.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const booksWithIdOnly = await prisma.books.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends booksFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, booksFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<booksPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Books.
     * @param {booksCreateArgs} args - Arguments to create a Books.
     * @example
     * // Create one Books
     * const Books = await prisma.books.create({
     *   data: {
     *     // ... data to create a Books
     *   }
     * })
     * 
    **/
    create<T extends booksCreateArgs<ExtArgs>>(
      args: SelectSubset<T, booksCreateArgs<ExtArgs>>
    ): Prisma__booksClient<$Types.GetResult<booksPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Books.
     *     @param {booksCreateManyArgs} args - Arguments to create many Books.
     *     @example
     *     // Create many Books
     *     const books = await prisma.books.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends booksCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, booksCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Books.
     * @param {booksDeleteArgs} args - Arguments to delete one Books.
     * @example
     * // Delete one Books
     * const Books = await prisma.books.delete({
     *   where: {
     *     // ... filter to delete one Books
     *   }
     * })
     * 
    **/
    delete<T extends booksDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, booksDeleteArgs<ExtArgs>>
    ): Prisma__booksClient<$Types.GetResult<booksPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Books.
     * @param {booksUpdateArgs} args - Arguments to update one Books.
     * @example
     * // Update one Books
     * const books = await prisma.books.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends booksUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, booksUpdateArgs<ExtArgs>>
    ): Prisma__booksClient<$Types.GetResult<booksPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Books.
     * @param {booksDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.books.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends booksDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, booksDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const books = await prisma.books.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends booksUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, booksUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Books.
     * @param {booksUpsertArgs} args - Arguments to update or create a Books.
     * @example
     * // Update or create a Books
     * const books = await prisma.books.upsert({
     *   create: {
     *     // ... data to create a Books
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Books we want to update
     *   }
     * })
    **/
    upsert<T extends booksUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, booksUpsertArgs<ExtArgs>>
    ): Prisma__booksClient<$Types.GetResult<booksPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.books.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends booksCountArgs>(
      args?: Subset<T, booksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BooksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BooksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BooksAggregateArgs>(args: Subset<T, BooksAggregateArgs>): Prisma.PrismaPromise<GetBooksAggregateType<T>>

    /**
     * Group by Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BooksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BooksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BooksGroupByArgs['orderBy'] }
        : { orderBy?: BooksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BooksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBooksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for books.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__booksClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    bindings<T extends bindingsArgs<ExtArgs> = {}>(args?: Subset<T, bindingsArgs<ExtArgs>>): Prisma__bindingsClient<$Types.GetResult<bindingsPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    formats<T extends formatsArgs<ExtArgs> = {}>(args?: Subset<T, formatsArgs<ExtArgs>>): Prisma__formatsClient<$Types.GetResult<formatsPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    languages<T extends languagesArgs<ExtArgs> = {}>(args?: Subset<T, languagesArgs<ExtArgs>>): Prisma__languagesClient<$Types.GetResult<languagesPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    publishers<T extends publishersArgs<ExtArgs> = {}>(args?: Subset<T, publishersArgs<ExtArgs>>): Prisma__publishersClient<$Types.GetResult<publishersPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    book_authors<T extends books$book_authorsArgs<ExtArgs> = {}>(args?: Subset<T, books$book_authorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<book_authorsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    book_categories<T extends books$book_categoriesArgs<ExtArgs> = {}>(args?: Subset<T, books$book_categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<book_categoriesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    covers<T extends books$coversArgs<ExtArgs> = {}>(args?: Subset<T, books$coversArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<coversPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * books base type for findUnique actions
   */
  export type booksFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * Filter, which books to fetch.
     */
    where: booksWhereUniqueInput
  }

  /**
   * books findUnique
   */
  export interface booksFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends booksFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * books findUniqueOrThrow
   */
  export type booksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * Filter, which books to fetch.
     */
    where: booksWhereUniqueInput
  }


  /**
   * books base type for findFirst actions
   */
  export type booksFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * Filter, which books to fetch.
     */
    where?: booksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
     */
    orderBy?: Enumerable<booksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for books.
     */
    cursor?: booksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of books.
     */
    distinct?: Enumerable<BooksScalarFieldEnum>
  }

  /**
   * books findFirst
   */
  export interface booksFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends booksFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * books findFirstOrThrow
   */
  export type booksFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * Filter, which books to fetch.
     */
    where?: booksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
     */
    orderBy?: Enumerable<booksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for books.
     */
    cursor?: booksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of books.
     */
    distinct?: Enumerable<BooksScalarFieldEnum>
  }


  /**
   * books findMany
   */
  export type booksFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * Filter, which books to fetch.
     */
    where?: booksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
     */
    orderBy?: Enumerable<booksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing books.
     */
    cursor?: booksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
     */
    skip?: number
    distinct?: Enumerable<BooksScalarFieldEnum>
  }


  /**
   * books create
   */
  export type booksCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * The data needed to create a books.
     */
    data: XOR<booksCreateInput, booksUncheckedCreateInput>
  }


  /**
   * books createMany
   */
  export type booksCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many books.
     */
    data: Enumerable<booksCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * books update
   */
  export type booksUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * The data needed to update a books.
     */
    data: XOR<booksUpdateInput, booksUncheckedUpdateInput>
    /**
     * Choose, which books to update.
     */
    where: booksWhereUniqueInput
  }


  /**
   * books updateMany
   */
  export type booksUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update books.
     */
    data: XOR<booksUpdateManyMutationInput, booksUncheckedUpdateManyInput>
    /**
     * Filter which books to update
     */
    where?: booksWhereInput
  }


  /**
   * books upsert
   */
  export type booksUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * The filter to search for the books to update in case it exists.
     */
    where: booksWhereUniqueInput
    /**
     * In case the books found by the `where` argument doesn't exist, create a new books with this data.
     */
    create: XOR<booksCreateInput, booksUncheckedCreateInput>
    /**
     * In case the books was found with the provided `where` argument, update it with this data.
     */
    update: XOR<booksUpdateInput, booksUncheckedUpdateInput>
  }


  /**
   * books delete
   */
  export type booksDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * Filter which books to delete.
     */
    where: booksWhereUniqueInput
  }


  /**
   * books deleteMany
   */
  export type booksDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which books to delete
     */
    where?: booksWhereInput
  }


  /**
   * books.book_authors
   */
  export type books$book_authorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_authors
     */
    select?: book_authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_authorsInclude<ExtArgs> | null
    where?: book_authorsWhereInput
    orderBy?: Enumerable<book_authorsOrderByWithRelationInput>
    cursor?: book_authorsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Book_authorsScalarFieldEnum>
  }


  /**
   * books.book_categories
   */
  export type books$book_categoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_categories
     */
    select?: book_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_categoriesInclude<ExtArgs> | null
    where?: book_categoriesWhereInput
    orderBy?: Enumerable<book_categoriesOrderByWithRelationInput>
    cursor?: book_categoriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Book_categoriesScalarFieldEnum>
  }


  /**
   * books.covers
   */
  export type books$coversArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the covers
     */
    select?: coversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coversInclude<ExtArgs> | null
    where?: coversWhereInput
    orderBy?: Enumerable<coversOrderByWithRelationInput>
    cursor?: coversWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CoversScalarFieldEnum>
  }


  /**
   * books without action
   */
  export type booksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: booksInclude<ExtArgs> | null
  }



  /**
   * Model book_categories
   */


  export type AggregateBook_categories = {
    _count: Book_categoriesCountAggregateOutputType | null
    _avg: Book_categoriesAvgAggregateOutputType | null
    _sum: Book_categoriesSumAggregateOutputType | null
    _min: Book_categoriesMinAggregateOutputType | null
    _max: Book_categoriesMaxAggregateOutputType | null
  }

  export type Book_categoriesAvgAggregateOutputType = {
    id: number | null
    bookId: number | null
    cathegorieId: number | null
  }

  export type Book_categoriesSumAggregateOutputType = {
    id: number | null
    bookId: number | null
    cathegorieId: number | null
  }

  export type Book_categoriesMinAggregateOutputType = {
    id: number | null
    bookId: number | null
    cathegorieId: number | null
  }

  export type Book_categoriesMaxAggregateOutputType = {
    id: number | null
    bookId: number | null
    cathegorieId: number | null
  }

  export type Book_categoriesCountAggregateOutputType = {
    id: number
    bookId: number
    cathegorieId: number
    _all: number
  }


  export type Book_categoriesAvgAggregateInputType = {
    id?: true
    bookId?: true
    cathegorieId?: true
  }

  export type Book_categoriesSumAggregateInputType = {
    id?: true
    bookId?: true
    cathegorieId?: true
  }

  export type Book_categoriesMinAggregateInputType = {
    id?: true
    bookId?: true
    cathegorieId?: true
  }

  export type Book_categoriesMaxAggregateInputType = {
    id?: true
    bookId?: true
    cathegorieId?: true
  }

  export type Book_categoriesCountAggregateInputType = {
    id?: true
    bookId?: true
    cathegorieId?: true
    _all?: true
  }

  export type Book_categoriesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which book_categories to aggregate.
     */
    where?: book_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of book_categories to fetch.
     */
    orderBy?: Enumerable<book_categoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: book_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` book_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` book_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned book_categories
    **/
    _count?: true | Book_categoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Book_categoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Book_categoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Book_categoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Book_categoriesMaxAggregateInputType
  }

  export type GetBook_categoriesAggregateType<T extends Book_categoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateBook_categories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBook_categories[P]>
      : GetScalarType<T[P], AggregateBook_categories[P]>
  }




  export type Book_categoriesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: book_categoriesWhereInput
    orderBy?: Enumerable<book_categoriesOrderByWithAggregationInput>
    by: Book_categoriesScalarFieldEnum[]
    having?: book_categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Book_categoriesCountAggregateInputType | true
    _avg?: Book_categoriesAvgAggregateInputType
    _sum?: Book_categoriesSumAggregateInputType
    _min?: Book_categoriesMinAggregateInputType
    _max?: Book_categoriesMaxAggregateInputType
  }


  export type Book_categoriesGroupByOutputType = {
    id: number
    bookId: number
    cathegorieId: number
    _count: Book_categoriesCountAggregateOutputType | null
    _avg: Book_categoriesAvgAggregateOutputType | null
    _sum: Book_categoriesSumAggregateOutputType | null
    _min: Book_categoriesMinAggregateOutputType | null
    _max: Book_categoriesMaxAggregateOutputType | null
  }

  type GetBook_categoriesGroupByPayload<T extends Book_categoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Book_categoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Book_categoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Book_categoriesGroupByOutputType[P]>
            : GetScalarType<T[P], Book_categoriesGroupByOutputType[P]>
        }
      >
    >


  export type book_categoriesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookId?: boolean
    cathegorieId?: boolean
    book?: boolean | booksArgs<ExtArgs>
    categorie?: boolean | categoriesArgs<ExtArgs>
  }, ExtArgs["result"]["book_categories"]>

  export type book_categoriesSelectScalar = {
    id?: boolean
    bookId?: boolean
    cathegorieId?: boolean
  }

  export type book_categoriesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book?: boolean | booksArgs<ExtArgs>
    categorie?: boolean | categoriesArgs<ExtArgs>
  }


  type book_categoriesGetPayload<S extends boolean | null | undefined | book_categoriesArgs> = $Types.GetResult<book_categoriesPayload, S>

  type book_categoriesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<book_categoriesFindManyArgs, 'select' | 'include'> & {
      select?: Book_categoriesCountAggregateInputType | true
    }

  export interface book_categoriesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['book_categories'], meta: { name: 'book_categories' } }
    /**
     * Find zero or one Book_categories that matches the filter.
     * @param {book_categoriesFindUniqueArgs} args - Arguments to find a Book_categories
     * @example
     * // Get one Book_categories
     * const book_categories = await prisma.book_categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends book_categoriesFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, book_categoriesFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'book_categories'> extends True ? Prisma__book_categoriesClient<$Types.GetResult<book_categoriesPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__book_categoriesClient<$Types.GetResult<book_categoriesPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Book_categories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {book_categoriesFindUniqueOrThrowArgs} args - Arguments to find a Book_categories
     * @example
     * // Get one Book_categories
     * const book_categories = await prisma.book_categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends book_categoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, book_categoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__book_categoriesClient<$Types.GetResult<book_categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Book_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {book_categoriesFindFirstArgs} args - Arguments to find a Book_categories
     * @example
     * // Get one Book_categories
     * const book_categories = await prisma.book_categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends book_categoriesFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, book_categoriesFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'book_categories'> extends True ? Prisma__book_categoriesClient<$Types.GetResult<book_categoriesPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__book_categoriesClient<$Types.GetResult<book_categoriesPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Book_categories that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {book_categoriesFindFirstOrThrowArgs} args - Arguments to find a Book_categories
     * @example
     * // Get one Book_categories
     * const book_categories = await prisma.book_categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends book_categoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, book_categoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__book_categoriesClient<$Types.GetResult<book_categoriesPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Book_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {book_categoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Book_categories
     * const book_categories = await prisma.book_categories.findMany()
     * 
     * // Get first 10 Book_categories
     * const book_categories = await prisma.book_categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const book_categoriesWithIdOnly = await prisma.book_categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends book_categoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, book_categoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<book_categoriesPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Book_categories.
     * @param {book_categoriesCreateArgs} args - Arguments to create a Book_categories.
     * @example
     * // Create one Book_categories
     * const Book_categories = await prisma.book_categories.create({
     *   data: {
     *     // ... data to create a Book_categories
     *   }
     * })
     * 
    **/
    create<T extends book_categoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, book_categoriesCreateArgs<ExtArgs>>
    ): Prisma__book_categoriesClient<$Types.GetResult<book_categoriesPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Book_categories.
     *     @param {book_categoriesCreateManyArgs} args - Arguments to create many Book_categories.
     *     @example
     *     // Create many Book_categories
     *     const book_categories = await prisma.book_categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends book_categoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, book_categoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Book_categories.
     * @param {book_categoriesDeleteArgs} args - Arguments to delete one Book_categories.
     * @example
     * // Delete one Book_categories
     * const Book_categories = await prisma.book_categories.delete({
     *   where: {
     *     // ... filter to delete one Book_categories
     *   }
     * })
     * 
    **/
    delete<T extends book_categoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, book_categoriesDeleteArgs<ExtArgs>>
    ): Prisma__book_categoriesClient<$Types.GetResult<book_categoriesPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Book_categories.
     * @param {book_categoriesUpdateArgs} args - Arguments to update one Book_categories.
     * @example
     * // Update one Book_categories
     * const book_categories = await prisma.book_categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends book_categoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, book_categoriesUpdateArgs<ExtArgs>>
    ): Prisma__book_categoriesClient<$Types.GetResult<book_categoriesPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Book_categories.
     * @param {book_categoriesDeleteManyArgs} args - Arguments to filter Book_categories to delete.
     * @example
     * // Delete a few Book_categories
     * const { count } = await prisma.book_categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends book_categoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, book_categoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Book_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {book_categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Book_categories
     * const book_categories = await prisma.book_categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends book_categoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, book_categoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Book_categories.
     * @param {book_categoriesUpsertArgs} args - Arguments to update or create a Book_categories.
     * @example
     * // Update or create a Book_categories
     * const book_categories = await prisma.book_categories.upsert({
     *   create: {
     *     // ... data to create a Book_categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Book_categories we want to update
     *   }
     * })
    **/
    upsert<T extends book_categoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, book_categoriesUpsertArgs<ExtArgs>>
    ): Prisma__book_categoriesClient<$Types.GetResult<book_categoriesPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Book_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {book_categoriesCountArgs} args - Arguments to filter Book_categories to count.
     * @example
     * // Count the number of Book_categories
     * const count = await prisma.book_categories.count({
     *   where: {
     *     // ... the filter for the Book_categories we want to count
     *   }
     * })
    **/
    count<T extends book_categoriesCountArgs>(
      args?: Subset<T, book_categoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Book_categoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Book_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Book_categoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Book_categoriesAggregateArgs>(args: Subset<T, Book_categoriesAggregateArgs>): Prisma.PrismaPromise<GetBook_categoriesAggregateType<T>>

    /**
     * Group by Book_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Book_categoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Book_categoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Book_categoriesGroupByArgs['orderBy'] }
        : { orderBy?: Book_categoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Book_categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBook_categoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for book_categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__book_categoriesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    book<T extends booksArgs<ExtArgs> = {}>(args?: Subset<T, booksArgs<ExtArgs>>): Prisma__booksClient<$Types.GetResult<booksPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    categorie<T extends categoriesArgs<ExtArgs> = {}>(args?: Subset<T, categoriesArgs<ExtArgs>>): Prisma__categoriesClient<$Types.GetResult<categoriesPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * book_categories base type for findUnique actions
   */
  export type book_categoriesFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_categories
     */
    select?: book_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which book_categories to fetch.
     */
    where: book_categoriesWhereUniqueInput
  }

  /**
   * book_categories findUnique
   */
  export interface book_categoriesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends book_categoriesFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * book_categories findUniqueOrThrow
   */
  export type book_categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_categories
     */
    select?: book_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which book_categories to fetch.
     */
    where: book_categoriesWhereUniqueInput
  }


  /**
   * book_categories base type for findFirst actions
   */
  export type book_categoriesFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_categories
     */
    select?: book_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which book_categories to fetch.
     */
    where?: book_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of book_categories to fetch.
     */
    orderBy?: Enumerable<book_categoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for book_categories.
     */
    cursor?: book_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` book_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` book_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of book_categories.
     */
    distinct?: Enumerable<Book_categoriesScalarFieldEnum>
  }

  /**
   * book_categories findFirst
   */
  export interface book_categoriesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends book_categoriesFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * book_categories findFirstOrThrow
   */
  export type book_categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_categories
     */
    select?: book_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which book_categories to fetch.
     */
    where?: book_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of book_categories to fetch.
     */
    orderBy?: Enumerable<book_categoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for book_categories.
     */
    cursor?: book_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` book_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` book_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of book_categories.
     */
    distinct?: Enumerable<Book_categoriesScalarFieldEnum>
  }


  /**
   * book_categories findMany
   */
  export type book_categoriesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_categories
     */
    select?: book_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which book_categories to fetch.
     */
    where?: book_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of book_categories to fetch.
     */
    orderBy?: Enumerable<book_categoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing book_categories.
     */
    cursor?: book_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` book_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` book_categories.
     */
    skip?: number
    distinct?: Enumerable<Book_categoriesScalarFieldEnum>
  }


  /**
   * book_categories create
   */
  export type book_categoriesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_categories
     */
    select?: book_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_categoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a book_categories.
     */
    data: XOR<book_categoriesCreateInput, book_categoriesUncheckedCreateInput>
  }


  /**
   * book_categories createMany
   */
  export type book_categoriesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many book_categories.
     */
    data: Enumerable<book_categoriesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * book_categories update
   */
  export type book_categoriesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_categories
     */
    select?: book_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_categoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a book_categories.
     */
    data: XOR<book_categoriesUpdateInput, book_categoriesUncheckedUpdateInput>
    /**
     * Choose, which book_categories to update.
     */
    where: book_categoriesWhereUniqueInput
  }


  /**
   * book_categories updateMany
   */
  export type book_categoriesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update book_categories.
     */
    data: XOR<book_categoriesUpdateManyMutationInput, book_categoriesUncheckedUpdateManyInput>
    /**
     * Filter which book_categories to update
     */
    where?: book_categoriesWhereInput
  }


  /**
   * book_categories upsert
   */
  export type book_categoriesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_categories
     */
    select?: book_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_categoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the book_categories to update in case it exists.
     */
    where: book_categoriesWhereUniqueInput
    /**
     * In case the book_categories found by the `where` argument doesn't exist, create a new book_categories with this data.
     */
    create: XOR<book_categoriesCreateInput, book_categoriesUncheckedCreateInput>
    /**
     * In case the book_categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<book_categoriesUpdateInput, book_categoriesUncheckedUpdateInput>
  }


  /**
   * book_categories delete
   */
  export type book_categoriesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_categories
     */
    select?: book_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_categoriesInclude<ExtArgs> | null
    /**
     * Filter which book_categories to delete.
     */
    where: book_categoriesWhereUniqueInput
  }


  /**
   * book_categories deleteMany
   */
  export type book_categoriesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which book_categories to delete
     */
    where?: book_categoriesWhereInput
  }


  /**
   * book_categories without action
   */
  export type book_categoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_categories
     */
    select?: book_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_categoriesInclude<ExtArgs> | null
  }



  /**
   * Model book_authors
   */


  export type AggregateBook_authors = {
    _count: Book_authorsCountAggregateOutputType | null
    _avg: Book_authorsAvgAggregateOutputType | null
    _sum: Book_authorsSumAggregateOutputType | null
    _min: Book_authorsMinAggregateOutputType | null
    _max: Book_authorsMaxAggregateOutputType | null
  }

  export type Book_authorsAvgAggregateOutputType = {
    id: number | null
    bookId: number | null
    authorId: number | null
  }

  export type Book_authorsSumAggregateOutputType = {
    id: number | null
    bookId: number | null
    authorId: number | null
  }

  export type Book_authorsMinAggregateOutputType = {
    id: number | null
    bookId: number | null
    authorId: number | null
  }

  export type Book_authorsMaxAggregateOutputType = {
    id: number | null
    bookId: number | null
    authorId: number | null
  }

  export type Book_authorsCountAggregateOutputType = {
    id: number
    bookId: number
    authorId: number
    _all: number
  }


  export type Book_authorsAvgAggregateInputType = {
    id?: true
    bookId?: true
    authorId?: true
  }

  export type Book_authorsSumAggregateInputType = {
    id?: true
    bookId?: true
    authorId?: true
  }

  export type Book_authorsMinAggregateInputType = {
    id?: true
    bookId?: true
    authorId?: true
  }

  export type Book_authorsMaxAggregateInputType = {
    id?: true
    bookId?: true
    authorId?: true
  }

  export type Book_authorsCountAggregateInputType = {
    id?: true
    bookId?: true
    authorId?: true
    _all?: true
  }

  export type Book_authorsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which book_authors to aggregate.
     */
    where?: book_authorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of book_authors to fetch.
     */
    orderBy?: Enumerable<book_authorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: book_authorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` book_authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` book_authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned book_authors
    **/
    _count?: true | Book_authorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Book_authorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Book_authorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Book_authorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Book_authorsMaxAggregateInputType
  }

  export type GetBook_authorsAggregateType<T extends Book_authorsAggregateArgs> = {
        [P in keyof T & keyof AggregateBook_authors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBook_authors[P]>
      : GetScalarType<T[P], AggregateBook_authors[P]>
  }




  export type Book_authorsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: book_authorsWhereInput
    orderBy?: Enumerable<book_authorsOrderByWithAggregationInput>
    by: Book_authorsScalarFieldEnum[]
    having?: book_authorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Book_authorsCountAggregateInputType | true
    _avg?: Book_authorsAvgAggregateInputType
    _sum?: Book_authorsSumAggregateInputType
    _min?: Book_authorsMinAggregateInputType
    _max?: Book_authorsMaxAggregateInputType
  }


  export type Book_authorsGroupByOutputType = {
    id: number
    bookId: number
    authorId: number
    _count: Book_authorsCountAggregateOutputType | null
    _avg: Book_authorsAvgAggregateOutputType | null
    _sum: Book_authorsSumAggregateOutputType | null
    _min: Book_authorsMinAggregateOutputType | null
    _max: Book_authorsMaxAggregateOutputType | null
  }

  type GetBook_authorsGroupByPayload<T extends Book_authorsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Book_authorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Book_authorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Book_authorsGroupByOutputType[P]>
            : GetScalarType<T[P], Book_authorsGroupByOutputType[P]>
        }
      >
    >


  export type book_authorsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookId?: boolean
    authorId?: boolean
    book?: boolean | booksArgs<ExtArgs>
    author?: boolean | authorsArgs<ExtArgs>
  }, ExtArgs["result"]["book_authors"]>

  export type book_authorsSelectScalar = {
    id?: boolean
    bookId?: boolean
    authorId?: boolean
  }

  export type book_authorsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book?: boolean | booksArgs<ExtArgs>
    author?: boolean | authorsArgs<ExtArgs>
  }


  type book_authorsGetPayload<S extends boolean | null | undefined | book_authorsArgs> = $Types.GetResult<book_authorsPayload, S>

  type book_authorsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<book_authorsFindManyArgs, 'select' | 'include'> & {
      select?: Book_authorsCountAggregateInputType | true
    }

  export interface book_authorsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['book_authors'], meta: { name: 'book_authors' } }
    /**
     * Find zero or one Book_authors that matches the filter.
     * @param {book_authorsFindUniqueArgs} args - Arguments to find a Book_authors
     * @example
     * // Get one Book_authors
     * const book_authors = await prisma.book_authors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends book_authorsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, book_authorsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'book_authors'> extends True ? Prisma__book_authorsClient<$Types.GetResult<book_authorsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__book_authorsClient<$Types.GetResult<book_authorsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Book_authors that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {book_authorsFindUniqueOrThrowArgs} args - Arguments to find a Book_authors
     * @example
     * // Get one Book_authors
     * const book_authors = await prisma.book_authors.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends book_authorsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, book_authorsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__book_authorsClient<$Types.GetResult<book_authorsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Book_authors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {book_authorsFindFirstArgs} args - Arguments to find a Book_authors
     * @example
     * // Get one Book_authors
     * const book_authors = await prisma.book_authors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends book_authorsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, book_authorsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'book_authors'> extends True ? Prisma__book_authorsClient<$Types.GetResult<book_authorsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__book_authorsClient<$Types.GetResult<book_authorsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Book_authors that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {book_authorsFindFirstOrThrowArgs} args - Arguments to find a Book_authors
     * @example
     * // Get one Book_authors
     * const book_authors = await prisma.book_authors.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends book_authorsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, book_authorsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__book_authorsClient<$Types.GetResult<book_authorsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Book_authors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {book_authorsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Book_authors
     * const book_authors = await prisma.book_authors.findMany()
     * 
     * // Get first 10 Book_authors
     * const book_authors = await prisma.book_authors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const book_authorsWithIdOnly = await prisma.book_authors.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends book_authorsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, book_authorsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<book_authorsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Book_authors.
     * @param {book_authorsCreateArgs} args - Arguments to create a Book_authors.
     * @example
     * // Create one Book_authors
     * const Book_authors = await prisma.book_authors.create({
     *   data: {
     *     // ... data to create a Book_authors
     *   }
     * })
     * 
    **/
    create<T extends book_authorsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, book_authorsCreateArgs<ExtArgs>>
    ): Prisma__book_authorsClient<$Types.GetResult<book_authorsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Book_authors.
     *     @param {book_authorsCreateManyArgs} args - Arguments to create many Book_authors.
     *     @example
     *     // Create many Book_authors
     *     const book_authors = await prisma.book_authors.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends book_authorsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, book_authorsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Book_authors.
     * @param {book_authorsDeleteArgs} args - Arguments to delete one Book_authors.
     * @example
     * // Delete one Book_authors
     * const Book_authors = await prisma.book_authors.delete({
     *   where: {
     *     // ... filter to delete one Book_authors
     *   }
     * })
     * 
    **/
    delete<T extends book_authorsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, book_authorsDeleteArgs<ExtArgs>>
    ): Prisma__book_authorsClient<$Types.GetResult<book_authorsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Book_authors.
     * @param {book_authorsUpdateArgs} args - Arguments to update one Book_authors.
     * @example
     * // Update one Book_authors
     * const book_authors = await prisma.book_authors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends book_authorsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, book_authorsUpdateArgs<ExtArgs>>
    ): Prisma__book_authorsClient<$Types.GetResult<book_authorsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Book_authors.
     * @param {book_authorsDeleteManyArgs} args - Arguments to filter Book_authors to delete.
     * @example
     * // Delete a few Book_authors
     * const { count } = await prisma.book_authors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends book_authorsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, book_authorsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Book_authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {book_authorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Book_authors
     * const book_authors = await prisma.book_authors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends book_authorsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, book_authorsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Book_authors.
     * @param {book_authorsUpsertArgs} args - Arguments to update or create a Book_authors.
     * @example
     * // Update or create a Book_authors
     * const book_authors = await prisma.book_authors.upsert({
     *   create: {
     *     // ... data to create a Book_authors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Book_authors we want to update
     *   }
     * })
    **/
    upsert<T extends book_authorsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, book_authorsUpsertArgs<ExtArgs>>
    ): Prisma__book_authorsClient<$Types.GetResult<book_authorsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Book_authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {book_authorsCountArgs} args - Arguments to filter Book_authors to count.
     * @example
     * // Count the number of Book_authors
     * const count = await prisma.book_authors.count({
     *   where: {
     *     // ... the filter for the Book_authors we want to count
     *   }
     * })
    **/
    count<T extends book_authorsCountArgs>(
      args?: Subset<T, book_authorsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Book_authorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Book_authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Book_authorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Book_authorsAggregateArgs>(args: Subset<T, Book_authorsAggregateArgs>): Prisma.PrismaPromise<GetBook_authorsAggregateType<T>>

    /**
     * Group by Book_authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Book_authorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Book_authorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Book_authorsGroupByArgs['orderBy'] }
        : { orderBy?: Book_authorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Book_authorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBook_authorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for book_authors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__book_authorsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    book<T extends booksArgs<ExtArgs> = {}>(args?: Subset<T, booksArgs<ExtArgs>>): Prisma__booksClient<$Types.GetResult<booksPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    author<T extends authorsArgs<ExtArgs> = {}>(args?: Subset<T, authorsArgs<ExtArgs>>): Prisma__authorsClient<$Types.GetResult<authorsPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * book_authors base type for findUnique actions
   */
  export type book_authorsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_authors
     */
    select?: book_authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_authorsInclude<ExtArgs> | null
    /**
     * Filter, which book_authors to fetch.
     */
    where: book_authorsWhereUniqueInput
  }

  /**
   * book_authors findUnique
   */
  export interface book_authorsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends book_authorsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * book_authors findUniqueOrThrow
   */
  export type book_authorsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_authors
     */
    select?: book_authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_authorsInclude<ExtArgs> | null
    /**
     * Filter, which book_authors to fetch.
     */
    where: book_authorsWhereUniqueInput
  }


  /**
   * book_authors base type for findFirst actions
   */
  export type book_authorsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_authors
     */
    select?: book_authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_authorsInclude<ExtArgs> | null
    /**
     * Filter, which book_authors to fetch.
     */
    where?: book_authorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of book_authors to fetch.
     */
    orderBy?: Enumerable<book_authorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for book_authors.
     */
    cursor?: book_authorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` book_authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` book_authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of book_authors.
     */
    distinct?: Enumerable<Book_authorsScalarFieldEnum>
  }

  /**
   * book_authors findFirst
   */
  export interface book_authorsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends book_authorsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * book_authors findFirstOrThrow
   */
  export type book_authorsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_authors
     */
    select?: book_authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_authorsInclude<ExtArgs> | null
    /**
     * Filter, which book_authors to fetch.
     */
    where?: book_authorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of book_authors to fetch.
     */
    orderBy?: Enumerable<book_authorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for book_authors.
     */
    cursor?: book_authorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` book_authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` book_authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of book_authors.
     */
    distinct?: Enumerable<Book_authorsScalarFieldEnum>
  }


  /**
   * book_authors findMany
   */
  export type book_authorsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_authors
     */
    select?: book_authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_authorsInclude<ExtArgs> | null
    /**
     * Filter, which book_authors to fetch.
     */
    where?: book_authorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of book_authors to fetch.
     */
    orderBy?: Enumerable<book_authorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing book_authors.
     */
    cursor?: book_authorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` book_authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` book_authors.
     */
    skip?: number
    distinct?: Enumerable<Book_authorsScalarFieldEnum>
  }


  /**
   * book_authors create
   */
  export type book_authorsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_authors
     */
    select?: book_authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_authorsInclude<ExtArgs> | null
    /**
     * The data needed to create a book_authors.
     */
    data: XOR<book_authorsCreateInput, book_authorsUncheckedCreateInput>
  }


  /**
   * book_authors createMany
   */
  export type book_authorsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many book_authors.
     */
    data: Enumerable<book_authorsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * book_authors update
   */
  export type book_authorsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_authors
     */
    select?: book_authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_authorsInclude<ExtArgs> | null
    /**
     * The data needed to update a book_authors.
     */
    data: XOR<book_authorsUpdateInput, book_authorsUncheckedUpdateInput>
    /**
     * Choose, which book_authors to update.
     */
    where: book_authorsWhereUniqueInput
  }


  /**
   * book_authors updateMany
   */
  export type book_authorsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update book_authors.
     */
    data: XOR<book_authorsUpdateManyMutationInput, book_authorsUncheckedUpdateManyInput>
    /**
     * Filter which book_authors to update
     */
    where?: book_authorsWhereInput
  }


  /**
   * book_authors upsert
   */
  export type book_authorsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_authors
     */
    select?: book_authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_authorsInclude<ExtArgs> | null
    /**
     * The filter to search for the book_authors to update in case it exists.
     */
    where: book_authorsWhereUniqueInput
    /**
     * In case the book_authors found by the `where` argument doesn't exist, create a new book_authors with this data.
     */
    create: XOR<book_authorsCreateInput, book_authorsUncheckedCreateInput>
    /**
     * In case the book_authors was found with the provided `where` argument, update it with this data.
     */
    update: XOR<book_authorsUpdateInput, book_authorsUncheckedUpdateInput>
  }


  /**
   * book_authors delete
   */
  export type book_authorsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_authors
     */
    select?: book_authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_authorsInclude<ExtArgs> | null
    /**
     * Filter which book_authors to delete.
     */
    where: book_authorsWhereUniqueInput
  }


  /**
   * book_authors deleteMany
   */
  export type book_authorsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which book_authors to delete
     */
    where?: book_authorsWhereInput
  }


  /**
   * book_authors without action
   */
  export type book_authorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the book_authors
     */
    select?: book_authorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: book_authorsInclude<ExtArgs> | null
  }



  /**
   * Model covers
   */


  export type AggregateCovers = {
    _count: CoversCountAggregateOutputType | null
    _avg: CoversAvgAggregateOutputType | null
    _sum: CoversSumAggregateOutputType | null
    _min: CoversMinAggregateOutputType | null
    _max: CoversMaxAggregateOutputType | null
  }

  export type CoversAvgAggregateOutputType = {
    id: number | null
    booksId: number | null
  }

  export type CoversSumAggregateOutputType = {
    id: number | null
    booksId: number | null
  }

  export type CoversMinAggregateOutputType = {
    id: number | null
    url: string | null
    booksId: number | null
  }

  export type CoversMaxAggregateOutputType = {
    id: number | null
    url: string | null
    booksId: number | null
  }

  export type CoversCountAggregateOutputType = {
    id: number
    url: number
    booksId: number
    _all: number
  }


  export type CoversAvgAggregateInputType = {
    id?: true
    booksId?: true
  }

  export type CoversSumAggregateInputType = {
    id?: true
    booksId?: true
  }

  export type CoversMinAggregateInputType = {
    id?: true
    url?: true
    booksId?: true
  }

  export type CoversMaxAggregateInputType = {
    id?: true
    url?: true
    booksId?: true
  }

  export type CoversCountAggregateInputType = {
    id?: true
    url?: true
    booksId?: true
    _all?: true
  }

  export type CoversAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which covers to aggregate.
     */
    where?: coversWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of covers to fetch.
     */
    orderBy?: Enumerable<coversOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: coversWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` covers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` covers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned covers
    **/
    _count?: true | CoversCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoversAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoversSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoversMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoversMaxAggregateInputType
  }

  export type GetCoversAggregateType<T extends CoversAggregateArgs> = {
        [P in keyof T & keyof AggregateCovers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCovers[P]>
      : GetScalarType<T[P], AggregateCovers[P]>
  }




  export type CoversGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: coversWhereInput
    orderBy?: Enumerable<coversOrderByWithAggregationInput>
    by: CoversScalarFieldEnum[]
    having?: coversScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoversCountAggregateInputType | true
    _avg?: CoversAvgAggregateInputType
    _sum?: CoversSumAggregateInputType
    _min?: CoversMinAggregateInputType
    _max?: CoversMaxAggregateInputType
  }


  export type CoversGroupByOutputType = {
    id: number
    url: string
    booksId: number
    _count: CoversCountAggregateOutputType | null
    _avg: CoversAvgAggregateOutputType | null
    _sum: CoversSumAggregateOutputType | null
    _min: CoversMinAggregateOutputType | null
    _max: CoversMaxAggregateOutputType | null
  }

  type GetCoversGroupByPayload<T extends CoversGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CoversGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoversGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoversGroupByOutputType[P]>
            : GetScalarType<T[P], CoversGroupByOutputType[P]>
        }
      >
    >


  export type coversSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    booksId?: boolean
    book?: boolean | booksArgs<ExtArgs>
  }, ExtArgs["result"]["covers"]>

  export type coversSelectScalar = {
    id?: boolean
    url?: boolean
    booksId?: boolean
  }

  export type coversInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book?: boolean | booksArgs<ExtArgs>
  }


  type coversGetPayload<S extends boolean | null | undefined | coversArgs> = $Types.GetResult<coversPayload, S>

  type coversCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<coversFindManyArgs, 'select' | 'include'> & {
      select?: CoversCountAggregateInputType | true
    }

  export interface coversDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['covers'], meta: { name: 'covers' } }
    /**
     * Find zero or one Covers that matches the filter.
     * @param {coversFindUniqueArgs} args - Arguments to find a Covers
     * @example
     * // Get one Covers
     * const covers = await prisma.covers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends coversFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, coversFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'covers'> extends True ? Prisma__coversClient<$Types.GetResult<coversPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__coversClient<$Types.GetResult<coversPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Covers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {coversFindUniqueOrThrowArgs} args - Arguments to find a Covers
     * @example
     * // Get one Covers
     * const covers = await prisma.covers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends coversFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, coversFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__coversClient<$Types.GetResult<coversPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Covers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coversFindFirstArgs} args - Arguments to find a Covers
     * @example
     * // Get one Covers
     * const covers = await prisma.covers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends coversFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, coversFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'covers'> extends True ? Prisma__coversClient<$Types.GetResult<coversPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__coversClient<$Types.GetResult<coversPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Covers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coversFindFirstOrThrowArgs} args - Arguments to find a Covers
     * @example
     * // Get one Covers
     * const covers = await prisma.covers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends coversFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, coversFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__coversClient<$Types.GetResult<coversPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Covers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coversFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Covers
     * const covers = await prisma.covers.findMany()
     * 
     * // Get first 10 Covers
     * const covers = await prisma.covers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coversWithIdOnly = await prisma.covers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends coversFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, coversFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<coversPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Covers.
     * @param {coversCreateArgs} args - Arguments to create a Covers.
     * @example
     * // Create one Covers
     * const Covers = await prisma.covers.create({
     *   data: {
     *     // ... data to create a Covers
     *   }
     * })
     * 
    **/
    create<T extends coversCreateArgs<ExtArgs>>(
      args: SelectSubset<T, coversCreateArgs<ExtArgs>>
    ): Prisma__coversClient<$Types.GetResult<coversPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Covers.
     *     @param {coversCreateManyArgs} args - Arguments to create many Covers.
     *     @example
     *     // Create many Covers
     *     const covers = await prisma.covers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends coversCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, coversCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Covers.
     * @param {coversDeleteArgs} args - Arguments to delete one Covers.
     * @example
     * // Delete one Covers
     * const Covers = await prisma.covers.delete({
     *   where: {
     *     // ... filter to delete one Covers
     *   }
     * })
     * 
    **/
    delete<T extends coversDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, coversDeleteArgs<ExtArgs>>
    ): Prisma__coversClient<$Types.GetResult<coversPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Covers.
     * @param {coversUpdateArgs} args - Arguments to update one Covers.
     * @example
     * // Update one Covers
     * const covers = await prisma.covers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends coversUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, coversUpdateArgs<ExtArgs>>
    ): Prisma__coversClient<$Types.GetResult<coversPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Covers.
     * @param {coversDeleteManyArgs} args - Arguments to filter Covers to delete.
     * @example
     * // Delete a few Covers
     * const { count } = await prisma.covers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends coversDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, coversDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Covers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coversUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Covers
     * const covers = await prisma.covers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends coversUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, coversUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Covers.
     * @param {coversUpsertArgs} args - Arguments to update or create a Covers.
     * @example
     * // Update or create a Covers
     * const covers = await prisma.covers.upsert({
     *   create: {
     *     // ... data to create a Covers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Covers we want to update
     *   }
     * })
    **/
    upsert<T extends coversUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, coversUpsertArgs<ExtArgs>>
    ): Prisma__coversClient<$Types.GetResult<coversPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Covers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coversCountArgs} args - Arguments to filter Covers to count.
     * @example
     * // Count the number of Covers
     * const count = await prisma.covers.count({
     *   where: {
     *     // ... the filter for the Covers we want to count
     *   }
     * })
    **/
    count<T extends coversCountArgs>(
      args?: Subset<T, coversCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoversCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Covers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoversAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoversAggregateArgs>(args: Subset<T, CoversAggregateArgs>): Prisma.PrismaPromise<GetCoversAggregateType<T>>

    /**
     * Group by Covers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoversGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoversGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoversGroupByArgs['orderBy'] }
        : { orderBy?: CoversGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoversGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoversGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for covers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__coversClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    book<T extends booksArgs<ExtArgs> = {}>(args?: Subset<T, booksArgs<ExtArgs>>): Prisma__booksClient<$Types.GetResult<booksPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * covers base type for findUnique actions
   */
  export type coversFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the covers
     */
    select?: coversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coversInclude<ExtArgs> | null
    /**
     * Filter, which covers to fetch.
     */
    where: coversWhereUniqueInput
  }

  /**
   * covers findUnique
   */
  export interface coversFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends coversFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * covers findUniqueOrThrow
   */
  export type coversFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the covers
     */
    select?: coversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coversInclude<ExtArgs> | null
    /**
     * Filter, which covers to fetch.
     */
    where: coversWhereUniqueInput
  }


  /**
   * covers base type for findFirst actions
   */
  export type coversFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the covers
     */
    select?: coversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coversInclude<ExtArgs> | null
    /**
     * Filter, which covers to fetch.
     */
    where?: coversWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of covers to fetch.
     */
    orderBy?: Enumerable<coversOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for covers.
     */
    cursor?: coversWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` covers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` covers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of covers.
     */
    distinct?: Enumerable<CoversScalarFieldEnum>
  }

  /**
   * covers findFirst
   */
  export interface coversFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends coversFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * covers findFirstOrThrow
   */
  export type coversFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the covers
     */
    select?: coversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coversInclude<ExtArgs> | null
    /**
     * Filter, which covers to fetch.
     */
    where?: coversWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of covers to fetch.
     */
    orderBy?: Enumerable<coversOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for covers.
     */
    cursor?: coversWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` covers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` covers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of covers.
     */
    distinct?: Enumerable<CoversScalarFieldEnum>
  }


  /**
   * covers findMany
   */
  export type coversFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the covers
     */
    select?: coversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coversInclude<ExtArgs> | null
    /**
     * Filter, which covers to fetch.
     */
    where?: coversWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of covers to fetch.
     */
    orderBy?: Enumerable<coversOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing covers.
     */
    cursor?: coversWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` covers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` covers.
     */
    skip?: number
    distinct?: Enumerable<CoversScalarFieldEnum>
  }


  /**
   * covers create
   */
  export type coversCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the covers
     */
    select?: coversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coversInclude<ExtArgs> | null
    /**
     * The data needed to create a covers.
     */
    data: XOR<coversCreateInput, coversUncheckedCreateInput>
  }


  /**
   * covers createMany
   */
  export type coversCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many covers.
     */
    data: Enumerable<coversCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * covers update
   */
  export type coversUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the covers
     */
    select?: coversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coversInclude<ExtArgs> | null
    /**
     * The data needed to update a covers.
     */
    data: XOR<coversUpdateInput, coversUncheckedUpdateInput>
    /**
     * Choose, which covers to update.
     */
    where: coversWhereUniqueInput
  }


  /**
   * covers updateMany
   */
  export type coversUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update covers.
     */
    data: XOR<coversUpdateManyMutationInput, coversUncheckedUpdateManyInput>
    /**
     * Filter which covers to update
     */
    where?: coversWhereInput
  }


  /**
   * covers upsert
   */
  export type coversUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the covers
     */
    select?: coversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coversInclude<ExtArgs> | null
    /**
     * The filter to search for the covers to update in case it exists.
     */
    where: coversWhereUniqueInput
    /**
     * In case the covers found by the `where` argument doesn't exist, create a new covers with this data.
     */
    create: XOR<coversCreateInput, coversUncheckedCreateInput>
    /**
     * In case the covers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<coversUpdateInput, coversUncheckedUpdateInput>
  }


  /**
   * covers delete
   */
  export type coversDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the covers
     */
    select?: coversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coversInclude<ExtArgs> | null
    /**
     * Filter which covers to delete.
     */
    where: coversWhereUniqueInput
  }


  /**
   * covers deleteMany
   */
  export type coversDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which covers to delete
     */
    where?: coversWhereInput
  }


  /**
   * covers without action
   */
  export type coversArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the covers
     */
    select?: coversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coversInclude<ExtArgs> | null
  }



  /**
   * Model bindings
   */


  export type AggregateBindings = {
    _count: BindingsCountAggregateOutputType | null
    _avg: BindingsAvgAggregateOutputType | null
    _sum: BindingsSumAggregateOutputType | null
    _min: BindingsMinAggregateOutputType | null
    _max: BindingsMaxAggregateOutputType | null
  }

  export type BindingsAvgAggregateOutputType = {
    id: number | null
  }

  export type BindingsSumAggregateOutputType = {
    id: number | null
  }

  export type BindingsMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type BindingsMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type BindingsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type BindingsAvgAggregateInputType = {
    id?: true
  }

  export type BindingsSumAggregateInputType = {
    id?: true
  }

  export type BindingsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type BindingsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type BindingsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type BindingsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which bindings to aggregate.
     */
    where?: bindingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bindings to fetch.
     */
    orderBy?: Enumerable<bindingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bindingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bindings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bindings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bindings
    **/
    _count?: true | BindingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BindingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BindingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BindingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BindingsMaxAggregateInputType
  }

  export type GetBindingsAggregateType<T extends BindingsAggregateArgs> = {
        [P in keyof T & keyof AggregateBindings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBindings[P]>
      : GetScalarType<T[P], AggregateBindings[P]>
  }




  export type BindingsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: bindingsWhereInput
    orderBy?: Enumerable<bindingsOrderByWithAggregationInput>
    by: BindingsScalarFieldEnum[]
    having?: bindingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BindingsCountAggregateInputType | true
    _avg?: BindingsAvgAggregateInputType
    _sum?: BindingsSumAggregateInputType
    _min?: BindingsMinAggregateInputType
    _max?: BindingsMaxAggregateInputType
  }


  export type BindingsGroupByOutputType = {
    id: number
    name: string
    _count: BindingsCountAggregateOutputType | null
    _avg: BindingsAvgAggregateOutputType | null
    _sum: BindingsSumAggregateOutputType | null
    _min: BindingsMinAggregateOutputType | null
    _max: BindingsMaxAggregateOutputType | null
  }

  type GetBindingsGroupByPayload<T extends BindingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BindingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BindingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BindingsGroupByOutputType[P]>
            : GetScalarType<T[P], BindingsGroupByOutputType[P]>
        }
      >
    >


  export type bindingsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    book?: boolean | bindings$bookArgs<ExtArgs>
    _count?: boolean | BindingsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["bindings"]>

  export type bindingsSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type bindingsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book?: boolean | bindings$bookArgs<ExtArgs>
    _count?: boolean | BindingsCountOutputTypeArgs<ExtArgs>
  }


  type bindingsGetPayload<S extends boolean | null | undefined | bindingsArgs> = $Types.GetResult<bindingsPayload, S>

  type bindingsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<bindingsFindManyArgs, 'select' | 'include'> & {
      select?: BindingsCountAggregateInputType | true
    }

  export interface bindingsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['bindings'], meta: { name: 'bindings' } }
    /**
     * Find zero or one Bindings that matches the filter.
     * @param {bindingsFindUniqueArgs} args - Arguments to find a Bindings
     * @example
     * // Get one Bindings
     * const bindings = await prisma.bindings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends bindingsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, bindingsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'bindings'> extends True ? Prisma__bindingsClient<$Types.GetResult<bindingsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__bindingsClient<$Types.GetResult<bindingsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Bindings that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {bindingsFindUniqueOrThrowArgs} args - Arguments to find a Bindings
     * @example
     * // Get one Bindings
     * const bindings = await prisma.bindings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends bindingsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, bindingsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__bindingsClient<$Types.GetResult<bindingsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Bindings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bindingsFindFirstArgs} args - Arguments to find a Bindings
     * @example
     * // Get one Bindings
     * const bindings = await prisma.bindings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends bindingsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, bindingsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'bindings'> extends True ? Prisma__bindingsClient<$Types.GetResult<bindingsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__bindingsClient<$Types.GetResult<bindingsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Bindings that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bindingsFindFirstOrThrowArgs} args - Arguments to find a Bindings
     * @example
     * // Get one Bindings
     * const bindings = await prisma.bindings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends bindingsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, bindingsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__bindingsClient<$Types.GetResult<bindingsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Bindings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bindingsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bindings
     * const bindings = await prisma.bindings.findMany()
     * 
     * // Get first 10 Bindings
     * const bindings = await prisma.bindings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bindingsWithIdOnly = await prisma.bindings.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends bindingsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bindingsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<bindingsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Bindings.
     * @param {bindingsCreateArgs} args - Arguments to create a Bindings.
     * @example
     * // Create one Bindings
     * const Bindings = await prisma.bindings.create({
     *   data: {
     *     // ... data to create a Bindings
     *   }
     * })
     * 
    **/
    create<T extends bindingsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, bindingsCreateArgs<ExtArgs>>
    ): Prisma__bindingsClient<$Types.GetResult<bindingsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Bindings.
     *     @param {bindingsCreateManyArgs} args - Arguments to create many Bindings.
     *     @example
     *     // Create many Bindings
     *     const bindings = await prisma.bindings.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends bindingsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bindingsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bindings.
     * @param {bindingsDeleteArgs} args - Arguments to delete one Bindings.
     * @example
     * // Delete one Bindings
     * const Bindings = await prisma.bindings.delete({
     *   where: {
     *     // ... filter to delete one Bindings
     *   }
     * })
     * 
    **/
    delete<T extends bindingsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, bindingsDeleteArgs<ExtArgs>>
    ): Prisma__bindingsClient<$Types.GetResult<bindingsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Bindings.
     * @param {bindingsUpdateArgs} args - Arguments to update one Bindings.
     * @example
     * // Update one Bindings
     * const bindings = await prisma.bindings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends bindingsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, bindingsUpdateArgs<ExtArgs>>
    ): Prisma__bindingsClient<$Types.GetResult<bindingsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Bindings.
     * @param {bindingsDeleteManyArgs} args - Arguments to filter Bindings to delete.
     * @example
     * // Delete a few Bindings
     * const { count } = await prisma.bindings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends bindingsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bindingsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bindings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bindingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bindings
     * const bindings = await prisma.bindings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends bindingsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, bindingsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bindings.
     * @param {bindingsUpsertArgs} args - Arguments to update or create a Bindings.
     * @example
     * // Update or create a Bindings
     * const bindings = await prisma.bindings.upsert({
     *   create: {
     *     // ... data to create a Bindings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bindings we want to update
     *   }
     * })
    **/
    upsert<T extends bindingsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, bindingsUpsertArgs<ExtArgs>>
    ): Prisma__bindingsClient<$Types.GetResult<bindingsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Bindings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bindingsCountArgs} args - Arguments to filter Bindings to count.
     * @example
     * // Count the number of Bindings
     * const count = await prisma.bindings.count({
     *   where: {
     *     // ... the filter for the Bindings we want to count
     *   }
     * })
    **/
    count<T extends bindingsCountArgs>(
      args?: Subset<T, bindingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BindingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bindings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BindingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BindingsAggregateArgs>(args: Subset<T, BindingsAggregateArgs>): Prisma.PrismaPromise<GetBindingsAggregateType<T>>

    /**
     * Group by Bindings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BindingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BindingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BindingsGroupByArgs['orderBy'] }
        : { orderBy?: BindingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BindingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBindingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for bindings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__bindingsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    book<T extends bindings$bookArgs<ExtArgs> = {}>(args?: Subset<T, bindings$bookArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<booksPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * bindings base type for findUnique actions
   */
  export type bindingsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bindings
     */
    select?: bindingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bindingsInclude<ExtArgs> | null
    /**
     * Filter, which bindings to fetch.
     */
    where: bindingsWhereUniqueInput
  }

  /**
   * bindings findUnique
   */
  export interface bindingsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends bindingsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * bindings findUniqueOrThrow
   */
  export type bindingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bindings
     */
    select?: bindingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bindingsInclude<ExtArgs> | null
    /**
     * Filter, which bindings to fetch.
     */
    where: bindingsWhereUniqueInput
  }


  /**
   * bindings base type for findFirst actions
   */
  export type bindingsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bindings
     */
    select?: bindingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bindingsInclude<ExtArgs> | null
    /**
     * Filter, which bindings to fetch.
     */
    where?: bindingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bindings to fetch.
     */
    orderBy?: Enumerable<bindingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bindings.
     */
    cursor?: bindingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bindings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bindings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bindings.
     */
    distinct?: Enumerable<BindingsScalarFieldEnum>
  }

  /**
   * bindings findFirst
   */
  export interface bindingsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends bindingsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * bindings findFirstOrThrow
   */
  export type bindingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bindings
     */
    select?: bindingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bindingsInclude<ExtArgs> | null
    /**
     * Filter, which bindings to fetch.
     */
    where?: bindingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bindings to fetch.
     */
    orderBy?: Enumerable<bindingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bindings.
     */
    cursor?: bindingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bindings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bindings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bindings.
     */
    distinct?: Enumerable<BindingsScalarFieldEnum>
  }


  /**
   * bindings findMany
   */
  export type bindingsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bindings
     */
    select?: bindingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bindingsInclude<ExtArgs> | null
    /**
     * Filter, which bindings to fetch.
     */
    where?: bindingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bindings to fetch.
     */
    orderBy?: Enumerable<bindingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bindings.
     */
    cursor?: bindingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bindings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bindings.
     */
    skip?: number
    distinct?: Enumerable<BindingsScalarFieldEnum>
  }


  /**
   * bindings create
   */
  export type bindingsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bindings
     */
    select?: bindingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bindingsInclude<ExtArgs> | null
    /**
     * The data needed to create a bindings.
     */
    data: XOR<bindingsCreateInput, bindingsUncheckedCreateInput>
  }


  /**
   * bindings createMany
   */
  export type bindingsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many bindings.
     */
    data: Enumerable<bindingsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * bindings update
   */
  export type bindingsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bindings
     */
    select?: bindingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bindingsInclude<ExtArgs> | null
    /**
     * The data needed to update a bindings.
     */
    data: XOR<bindingsUpdateInput, bindingsUncheckedUpdateInput>
    /**
     * Choose, which bindings to update.
     */
    where: bindingsWhereUniqueInput
  }


  /**
   * bindings updateMany
   */
  export type bindingsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update bindings.
     */
    data: XOR<bindingsUpdateManyMutationInput, bindingsUncheckedUpdateManyInput>
    /**
     * Filter which bindings to update
     */
    where?: bindingsWhereInput
  }


  /**
   * bindings upsert
   */
  export type bindingsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bindings
     */
    select?: bindingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bindingsInclude<ExtArgs> | null
    /**
     * The filter to search for the bindings to update in case it exists.
     */
    where: bindingsWhereUniqueInput
    /**
     * In case the bindings found by the `where` argument doesn't exist, create a new bindings with this data.
     */
    create: XOR<bindingsCreateInput, bindingsUncheckedCreateInput>
    /**
     * In case the bindings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bindingsUpdateInput, bindingsUncheckedUpdateInput>
  }


  /**
   * bindings delete
   */
  export type bindingsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bindings
     */
    select?: bindingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bindingsInclude<ExtArgs> | null
    /**
     * Filter which bindings to delete.
     */
    where: bindingsWhereUniqueInput
  }


  /**
   * bindings deleteMany
   */
  export type bindingsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which bindings to delete
     */
    where?: bindingsWhereInput
  }


  /**
   * bindings.book
   */
  export type bindings$bookArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: booksInclude<ExtArgs> | null
    where?: booksWhereInput
    orderBy?: Enumerable<booksOrderByWithRelationInput>
    cursor?: booksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BooksScalarFieldEnum>
  }


  /**
   * bindings without action
   */
  export type bindingsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bindings
     */
    select?: bindingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bindingsInclude<ExtArgs> | null
  }



  /**
   * Model formats
   */


  export type AggregateFormats = {
    _count: FormatsCountAggregateOutputType | null
    _avg: FormatsAvgAggregateOutputType | null
    _sum: FormatsSumAggregateOutputType | null
    _min: FormatsMinAggregateOutputType | null
    _max: FormatsMaxAggregateOutputType | null
  }

  export type FormatsAvgAggregateOutputType = {
    id: number | null
  }

  export type FormatsSumAggregateOutputType = {
    id: number | null
  }

  export type FormatsMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type FormatsMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type FormatsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type FormatsAvgAggregateInputType = {
    id?: true
  }

  export type FormatsSumAggregateInputType = {
    id?: true
  }

  export type FormatsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type FormatsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type FormatsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type FormatsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which formats to aggregate.
     */
    where?: formatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of formats to fetch.
     */
    orderBy?: Enumerable<formatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: formatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` formats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` formats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned formats
    **/
    _count?: true | FormatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FormatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FormatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormatsMaxAggregateInputType
  }

  export type GetFormatsAggregateType<T extends FormatsAggregateArgs> = {
        [P in keyof T & keyof AggregateFormats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFormats[P]>
      : GetScalarType<T[P], AggregateFormats[P]>
  }




  export type FormatsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: formatsWhereInput
    orderBy?: Enumerable<formatsOrderByWithAggregationInput>
    by: FormatsScalarFieldEnum[]
    having?: formatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormatsCountAggregateInputType | true
    _avg?: FormatsAvgAggregateInputType
    _sum?: FormatsSumAggregateInputType
    _min?: FormatsMinAggregateInputType
    _max?: FormatsMaxAggregateInputType
  }


  export type FormatsGroupByOutputType = {
    id: number
    name: string
    _count: FormatsCountAggregateOutputType | null
    _avg: FormatsAvgAggregateOutputType | null
    _sum: FormatsSumAggregateOutputType | null
    _min: FormatsMinAggregateOutputType | null
    _max: FormatsMaxAggregateOutputType | null
  }

  type GetFormatsGroupByPayload<T extends FormatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FormatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormatsGroupByOutputType[P]>
            : GetScalarType<T[P], FormatsGroupByOutputType[P]>
        }
      >
    >


  export type formatsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    book?: boolean | formats$bookArgs<ExtArgs>
    _count?: boolean | FormatsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["formats"]>

  export type formatsSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type formatsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book?: boolean | formats$bookArgs<ExtArgs>
    _count?: boolean | FormatsCountOutputTypeArgs<ExtArgs>
  }


  type formatsGetPayload<S extends boolean | null | undefined | formatsArgs> = $Types.GetResult<formatsPayload, S>

  type formatsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<formatsFindManyArgs, 'select' | 'include'> & {
      select?: FormatsCountAggregateInputType | true
    }

  export interface formatsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['formats'], meta: { name: 'formats' } }
    /**
     * Find zero or one Formats that matches the filter.
     * @param {formatsFindUniqueArgs} args - Arguments to find a Formats
     * @example
     * // Get one Formats
     * const formats = await prisma.formats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends formatsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, formatsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'formats'> extends True ? Prisma__formatsClient<$Types.GetResult<formatsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__formatsClient<$Types.GetResult<formatsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Formats that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {formatsFindUniqueOrThrowArgs} args - Arguments to find a Formats
     * @example
     * // Get one Formats
     * const formats = await prisma.formats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends formatsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, formatsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__formatsClient<$Types.GetResult<formatsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Formats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formatsFindFirstArgs} args - Arguments to find a Formats
     * @example
     * // Get one Formats
     * const formats = await prisma.formats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends formatsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, formatsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'formats'> extends True ? Prisma__formatsClient<$Types.GetResult<formatsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__formatsClient<$Types.GetResult<formatsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Formats that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formatsFindFirstOrThrowArgs} args - Arguments to find a Formats
     * @example
     * // Get one Formats
     * const formats = await prisma.formats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends formatsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, formatsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__formatsClient<$Types.GetResult<formatsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Formats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formatsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Formats
     * const formats = await prisma.formats.findMany()
     * 
     * // Get first 10 Formats
     * const formats = await prisma.formats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formatsWithIdOnly = await prisma.formats.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends formatsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, formatsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<formatsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Formats.
     * @param {formatsCreateArgs} args - Arguments to create a Formats.
     * @example
     * // Create one Formats
     * const Formats = await prisma.formats.create({
     *   data: {
     *     // ... data to create a Formats
     *   }
     * })
     * 
    **/
    create<T extends formatsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, formatsCreateArgs<ExtArgs>>
    ): Prisma__formatsClient<$Types.GetResult<formatsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Formats.
     *     @param {formatsCreateManyArgs} args - Arguments to create many Formats.
     *     @example
     *     // Create many Formats
     *     const formats = await prisma.formats.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends formatsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, formatsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Formats.
     * @param {formatsDeleteArgs} args - Arguments to delete one Formats.
     * @example
     * // Delete one Formats
     * const Formats = await prisma.formats.delete({
     *   where: {
     *     // ... filter to delete one Formats
     *   }
     * })
     * 
    **/
    delete<T extends formatsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, formatsDeleteArgs<ExtArgs>>
    ): Prisma__formatsClient<$Types.GetResult<formatsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Formats.
     * @param {formatsUpdateArgs} args - Arguments to update one Formats.
     * @example
     * // Update one Formats
     * const formats = await prisma.formats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends formatsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, formatsUpdateArgs<ExtArgs>>
    ): Prisma__formatsClient<$Types.GetResult<formatsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Formats.
     * @param {formatsDeleteManyArgs} args - Arguments to filter Formats to delete.
     * @example
     * // Delete a few Formats
     * const { count } = await prisma.formats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends formatsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, formatsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Formats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Formats
     * const formats = await prisma.formats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends formatsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, formatsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Formats.
     * @param {formatsUpsertArgs} args - Arguments to update or create a Formats.
     * @example
     * // Update or create a Formats
     * const formats = await prisma.formats.upsert({
     *   create: {
     *     // ... data to create a Formats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Formats we want to update
     *   }
     * })
    **/
    upsert<T extends formatsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, formatsUpsertArgs<ExtArgs>>
    ): Prisma__formatsClient<$Types.GetResult<formatsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Formats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formatsCountArgs} args - Arguments to filter Formats to count.
     * @example
     * // Count the number of Formats
     * const count = await prisma.formats.count({
     *   where: {
     *     // ... the filter for the Formats we want to count
     *   }
     * })
    **/
    count<T extends formatsCountArgs>(
      args?: Subset<T, formatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Formats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormatsAggregateArgs>(args: Subset<T, FormatsAggregateArgs>): Prisma.PrismaPromise<GetFormatsAggregateType<T>>

    /**
     * Group by Formats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FormatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FormatsGroupByArgs['orderBy'] }
        : { orderBy?: FormatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FormatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for formats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__formatsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    book<T extends formats$bookArgs<ExtArgs> = {}>(args?: Subset<T, formats$bookArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<booksPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * formats base type for findUnique actions
   */
  export type formatsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formats
     */
    select?: formatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formatsInclude<ExtArgs> | null
    /**
     * Filter, which formats to fetch.
     */
    where: formatsWhereUniqueInput
  }

  /**
   * formats findUnique
   */
  export interface formatsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends formatsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * formats findUniqueOrThrow
   */
  export type formatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formats
     */
    select?: formatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formatsInclude<ExtArgs> | null
    /**
     * Filter, which formats to fetch.
     */
    where: formatsWhereUniqueInput
  }


  /**
   * formats base type for findFirst actions
   */
  export type formatsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formats
     */
    select?: formatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formatsInclude<ExtArgs> | null
    /**
     * Filter, which formats to fetch.
     */
    where?: formatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of formats to fetch.
     */
    orderBy?: Enumerable<formatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for formats.
     */
    cursor?: formatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` formats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` formats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of formats.
     */
    distinct?: Enumerable<FormatsScalarFieldEnum>
  }

  /**
   * formats findFirst
   */
  export interface formatsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends formatsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * formats findFirstOrThrow
   */
  export type formatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formats
     */
    select?: formatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formatsInclude<ExtArgs> | null
    /**
     * Filter, which formats to fetch.
     */
    where?: formatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of formats to fetch.
     */
    orderBy?: Enumerable<formatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for formats.
     */
    cursor?: formatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` formats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` formats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of formats.
     */
    distinct?: Enumerable<FormatsScalarFieldEnum>
  }


  /**
   * formats findMany
   */
  export type formatsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formats
     */
    select?: formatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formatsInclude<ExtArgs> | null
    /**
     * Filter, which formats to fetch.
     */
    where?: formatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of formats to fetch.
     */
    orderBy?: Enumerable<formatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing formats.
     */
    cursor?: formatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` formats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` formats.
     */
    skip?: number
    distinct?: Enumerable<FormatsScalarFieldEnum>
  }


  /**
   * formats create
   */
  export type formatsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formats
     */
    select?: formatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formatsInclude<ExtArgs> | null
    /**
     * The data needed to create a formats.
     */
    data: XOR<formatsCreateInput, formatsUncheckedCreateInput>
  }


  /**
   * formats createMany
   */
  export type formatsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many formats.
     */
    data: Enumerable<formatsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * formats update
   */
  export type formatsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formats
     */
    select?: formatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formatsInclude<ExtArgs> | null
    /**
     * The data needed to update a formats.
     */
    data: XOR<formatsUpdateInput, formatsUncheckedUpdateInput>
    /**
     * Choose, which formats to update.
     */
    where: formatsWhereUniqueInput
  }


  /**
   * formats updateMany
   */
  export type formatsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update formats.
     */
    data: XOR<formatsUpdateManyMutationInput, formatsUncheckedUpdateManyInput>
    /**
     * Filter which formats to update
     */
    where?: formatsWhereInput
  }


  /**
   * formats upsert
   */
  export type formatsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formats
     */
    select?: formatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formatsInclude<ExtArgs> | null
    /**
     * The filter to search for the formats to update in case it exists.
     */
    where: formatsWhereUniqueInput
    /**
     * In case the formats found by the `where` argument doesn't exist, create a new formats with this data.
     */
    create: XOR<formatsCreateInput, formatsUncheckedCreateInput>
    /**
     * In case the formats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<formatsUpdateInput, formatsUncheckedUpdateInput>
  }


  /**
   * formats delete
   */
  export type formatsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formats
     */
    select?: formatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formatsInclude<ExtArgs> | null
    /**
     * Filter which formats to delete.
     */
    where: formatsWhereUniqueInput
  }


  /**
   * formats deleteMany
   */
  export type formatsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which formats to delete
     */
    where?: formatsWhereInput
  }


  /**
   * formats.book
   */
  export type formats$bookArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: booksInclude<ExtArgs> | null
    where?: booksWhereInput
    orderBy?: Enumerable<booksOrderByWithRelationInput>
    cursor?: booksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BooksScalarFieldEnum>
  }


  /**
   * formats without action
   */
  export type formatsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formats
     */
    select?: formatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formatsInclude<ExtArgs> | null
  }



  /**
   * Model languages
   */


  export type AggregateLanguages = {
    _count: LanguagesCountAggregateOutputType | null
    _avg: LanguagesAvgAggregateOutputType | null
    _sum: LanguagesSumAggregateOutputType | null
    _min: LanguagesMinAggregateOutputType | null
    _max: LanguagesMaxAggregateOutputType | null
  }

  export type LanguagesAvgAggregateOutputType = {
    id: number | null
  }

  export type LanguagesSumAggregateOutputType = {
    id: number | null
  }

  export type LanguagesMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type LanguagesMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type LanguagesCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type LanguagesAvgAggregateInputType = {
    id?: true
  }

  export type LanguagesSumAggregateInputType = {
    id?: true
  }

  export type LanguagesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type LanguagesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type LanguagesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type LanguagesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which languages to aggregate.
     */
    where?: languagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of languages to fetch.
     */
    orderBy?: Enumerable<languagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: languagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned languages
    **/
    _count?: true | LanguagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LanguagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LanguagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguagesMaxAggregateInputType
  }

  export type GetLanguagesAggregateType<T extends LanguagesAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguages[P]>
      : GetScalarType<T[P], AggregateLanguages[P]>
  }




  export type LanguagesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: languagesWhereInput
    orderBy?: Enumerable<languagesOrderByWithAggregationInput>
    by: LanguagesScalarFieldEnum[]
    having?: languagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguagesCountAggregateInputType | true
    _avg?: LanguagesAvgAggregateInputType
    _sum?: LanguagesSumAggregateInputType
    _min?: LanguagesMinAggregateInputType
    _max?: LanguagesMaxAggregateInputType
  }


  export type LanguagesGroupByOutputType = {
    id: number
    name: string
    _count: LanguagesCountAggregateOutputType | null
    _avg: LanguagesAvgAggregateOutputType | null
    _sum: LanguagesSumAggregateOutputType | null
    _min: LanguagesMinAggregateOutputType | null
    _max: LanguagesMaxAggregateOutputType | null
  }

  type GetLanguagesGroupByPayload<T extends LanguagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LanguagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguagesGroupByOutputType[P]>
            : GetScalarType<T[P], LanguagesGroupByOutputType[P]>
        }
      >
    >


  export type languagesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    book?: boolean | languages$bookArgs<ExtArgs>
    _count?: boolean | LanguagesCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["languages"]>

  export type languagesSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type languagesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book?: boolean | languages$bookArgs<ExtArgs>
    _count?: boolean | LanguagesCountOutputTypeArgs<ExtArgs>
  }


  type languagesGetPayload<S extends boolean | null | undefined | languagesArgs> = $Types.GetResult<languagesPayload, S>

  type languagesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<languagesFindManyArgs, 'select' | 'include'> & {
      select?: LanguagesCountAggregateInputType | true
    }

  export interface languagesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['languages'], meta: { name: 'languages' } }
    /**
     * Find zero or one Languages that matches the filter.
     * @param {languagesFindUniqueArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends languagesFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, languagesFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'languages'> extends True ? Prisma__languagesClient<$Types.GetResult<languagesPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__languagesClient<$Types.GetResult<languagesPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Languages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {languagesFindUniqueOrThrowArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends languagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, languagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__languagesClient<$Types.GetResult<languagesPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Languages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {languagesFindFirstArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends languagesFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, languagesFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'languages'> extends True ? Prisma__languagesClient<$Types.GetResult<languagesPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__languagesClient<$Types.GetResult<languagesPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Languages that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {languagesFindFirstOrThrowArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends languagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, languagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__languagesClient<$Types.GetResult<languagesPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Languages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {languagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Languages
     * const languages = await prisma.languages.findMany()
     * 
     * // Get first 10 Languages
     * const languages = await prisma.languages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languagesWithIdOnly = await prisma.languages.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends languagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, languagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<languagesPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Languages.
     * @param {languagesCreateArgs} args - Arguments to create a Languages.
     * @example
     * // Create one Languages
     * const Languages = await prisma.languages.create({
     *   data: {
     *     // ... data to create a Languages
     *   }
     * })
     * 
    **/
    create<T extends languagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, languagesCreateArgs<ExtArgs>>
    ): Prisma__languagesClient<$Types.GetResult<languagesPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Languages.
     *     @param {languagesCreateManyArgs} args - Arguments to create many Languages.
     *     @example
     *     // Create many Languages
     *     const languages = await prisma.languages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends languagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, languagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Languages.
     * @param {languagesDeleteArgs} args - Arguments to delete one Languages.
     * @example
     * // Delete one Languages
     * const Languages = await prisma.languages.delete({
     *   where: {
     *     // ... filter to delete one Languages
     *   }
     * })
     * 
    **/
    delete<T extends languagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, languagesDeleteArgs<ExtArgs>>
    ): Prisma__languagesClient<$Types.GetResult<languagesPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Languages.
     * @param {languagesUpdateArgs} args - Arguments to update one Languages.
     * @example
     * // Update one Languages
     * const languages = await prisma.languages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends languagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, languagesUpdateArgs<ExtArgs>>
    ): Prisma__languagesClient<$Types.GetResult<languagesPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Languages.
     * @param {languagesDeleteManyArgs} args - Arguments to filter Languages to delete.
     * @example
     * // Delete a few Languages
     * const { count } = await prisma.languages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends languagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, languagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {languagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Languages
     * const languages = await prisma.languages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends languagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, languagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Languages.
     * @param {languagesUpsertArgs} args - Arguments to update or create a Languages.
     * @example
     * // Update or create a Languages
     * const languages = await prisma.languages.upsert({
     *   create: {
     *     // ... data to create a Languages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Languages we want to update
     *   }
     * })
    **/
    upsert<T extends languagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, languagesUpsertArgs<ExtArgs>>
    ): Prisma__languagesClient<$Types.GetResult<languagesPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {languagesCountArgs} args - Arguments to filter Languages to count.
     * @example
     * // Count the number of Languages
     * const count = await prisma.languages.count({
     *   where: {
     *     // ... the filter for the Languages we want to count
     *   }
     * })
    **/
    count<T extends languagesCountArgs>(
      args?: Subset<T, languagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguagesAggregateArgs>(args: Subset<T, LanguagesAggregateArgs>): Prisma.PrismaPromise<GetLanguagesAggregateType<T>>

    /**
     * Group by Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguagesGroupByArgs['orderBy'] }
        : { orderBy?: LanguagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for languages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__languagesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    book<T extends languages$bookArgs<ExtArgs> = {}>(args?: Subset<T, languages$bookArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<booksPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * languages base type for findUnique actions
   */
  export type languagesFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the languages
     */
    select?: languagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: languagesInclude<ExtArgs> | null
    /**
     * Filter, which languages to fetch.
     */
    where: languagesWhereUniqueInput
  }

  /**
   * languages findUnique
   */
  export interface languagesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends languagesFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * languages findUniqueOrThrow
   */
  export type languagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the languages
     */
    select?: languagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: languagesInclude<ExtArgs> | null
    /**
     * Filter, which languages to fetch.
     */
    where: languagesWhereUniqueInput
  }


  /**
   * languages base type for findFirst actions
   */
  export type languagesFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the languages
     */
    select?: languagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: languagesInclude<ExtArgs> | null
    /**
     * Filter, which languages to fetch.
     */
    where?: languagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of languages to fetch.
     */
    orderBy?: Enumerable<languagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for languages.
     */
    cursor?: languagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of languages.
     */
    distinct?: Enumerable<LanguagesScalarFieldEnum>
  }

  /**
   * languages findFirst
   */
  export interface languagesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends languagesFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * languages findFirstOrThrow
   */
  export type languagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the languages
     */
    select?: languagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: languagesInclude<ExtArgs> | null
    /**
     * Filter, which languages to fetch.
     */
    where?: languagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of languages to fetch.
     */
    orderBy?: Enumerable<languagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for languages.
     */
    cursor?: languagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of languages.
     */
    distinct?: Enumerable<LanguagesScalarFieldEnum>
  }


  /**
   * languages findMany
   */
  export type languagesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the languages
     */
    select?: languagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: languagesInclude<ExtArgs> | null
    /**
     * Filter, which languages to fetch.
     */
    where?: languagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of languages to fetch.
     */
    orderBy?: Enumerable<languagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing languages.
     */
    cursor?: languagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` languages.
     */
    skip?: number
    distinct?: Enumerable<LanguagesScalarFieldEnum>
  }


  /**
   * languages create
   */
  export type languagesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the languages
     */
    select?: languagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: languagesInclude<ExtArgs> | null
    /**
     * The data needed to create a languages.
     */
    data: XOR<languagesCreateInput, languagesUncheckedCreateInput>
  }


  /**
   * languages createMany
   */
  export type languagesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many languages.
     */
    data: Enumerable<languagesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * languages update
   */
  export type languagesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the languages
     */
    select?: languagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: languagesInclude<ExtArgs> | null
    /**
     * The data needed to update a languages.
     */
    data: XOR<languagesUpdateInput, languagesUncheckedUpdateInput>
    /**
     * Choose, which languages to update.
     */
    where: languagesWhereUniqueInput
  }


  /**
   * languages updateMany
   */
  export type languagesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update languages.
     */
    data: XOR<languagesUpdateManyMutationInput, languagesUncheckedUpdateManyInput>
    /**
     * Filter which languages to update
     */
    where?: languagesWhereInput
  }


  /**
   * languages upsert
   */
  export type languagesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the languages
     */
    select?: languagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: languagesInclude<ExtArgs> | null
    /**
     * The filter to search for the languages to update in case it exists.
     */
    where: languagesWhereUniqueInput
    /**
     * In case the languages found by the `where` argument doesn't exist, create a new languages with this data.
     */
    create: XOR<languagesCreateInput, languagesUncheckedCreateInput>
    /**
     * In case the languages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<languagesUpdateInput, languagesUncheckedUpdateInput>
  }


  /**
   * languages delete
   */
  export type languagesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the languages
     */
    select?: languagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: languagesInclude<ExtArgs> | null
    /**
     * Filter which languages to delete.
     */
    where: languagesWhereUniqueInput
  }


  /**
   * languages deleteMany
   */
  export type languagesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which languages to delete
     */
    where?: languagesWhereInput
  }


  /**
   * languages.book
   */
  export type languages$bookArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: booksInclude<ExtArgs> | null
    where?: booksWhereInput
    orderBy?: Enumerable<booksOrderByWithRelationInput>
    cursor?: booksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BooksScalarFieldEnum>
  }


  /**
   * languages without action
   */
  export type languagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the languages
     */
    select?: languagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: languagesInclude<ExtArgs> | null
  }



  /**
   * Model publishers
   */


  export type AggregatePublishers = {
    _count: PublishersCountAggregateOutputType | null
    _avg: PublishersAvgAggregateOutputType | null
    _sum: PublishersSumAggregateOutputType | null
    _min: PublishersMinAggregateOutputType | null
    _max: PublishersMaxAggregateOutputType | null
  }

  export type PublishersAvgAggregateOutputType = {
    id: number | null
  }

  export type PublishersSumAggregateOutputType = {
    id: number | null
  }

  export type PublishersMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type PublishersMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type PublishersCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type PublishersAvgAggregateInputType = {
    id?: true
  }

  export type PublishersSumAggregateInputType = {
    id?: true
  }

  export type PublishersMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type PublishersMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type PublishersCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type PublishersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which publishers to aggregate.
     */
    where?: publishersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of publishers to fetch.
     */
    orderBy?: Enumerable<publishersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: publishersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` publishers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` publishers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned publishers
    **/
    _count?: true | PublishersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PublishersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PublishersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PublishersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PublishersMaxAggregateInputType
  }

  export type GetPublishersAggregateType<T extends PublishersAggregateArgs> = {
        [P in keyof T & keyof AggregatePublishers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePublishers[P]>
      : GetScalarType<T[P], AggregatePublishers[P]>
  }




  export type PublishersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: publishersWhereInput
    orderBy?: Enumerable<publishersOrderByWithAggregationInput>
    by: PublishersScalarFieldEnum[]
    having?: publishersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PublishersCountAggregateInputType | true
    _avg?: PublishersAvgAggregateInputType
    _sum?: PublishersSumAggregateInputType
    _min?: PublishersMinAggregateInputType
    _max?: PublishersMaxAggregateInputType
  }


  export type PublishersGroupByOutputType = {
    id: number
    name: string
    _count: PublishersCountAggregateOutputType | null
    _avg: PublishersAvgAggregateOutputType | null
    _sum: PublishersSumAggregateOutputType | null
    _min: PublishersMinAggregateOutputType | null
    _max: PublishersMaxAggregateOutputType | null
  }

  type GetPublishersGroupByPayload<T extends PublishersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PublishersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PublishersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PublishersGroupByOutputType[P]>
            : GetScalarType<T[P], PublishersGroupByOutputType[P]>
        }
      >
    >


  export type publishersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    book?: boolean | publishers$bookArgs<ExtArgs>
    _count?: boolean | PublishersCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["publishers"]>

  export type publishersSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type publishersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    book?: boolean | publishers$bookArgs<ExtArgs>
    _count?: boolean | PublishersCountOutputTypeArgs<ExtArgs>
  }


  type publishersGetPayload<S extends boolean | null | undefined | publishersArgs> = $Types.GetResult<publishersPayload, S>

  type publishersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<publishersFindManyArgs, 'select' | 'include'> & {
      select?: PublishersCountAggregateInputType | true
    }

  export interface publishersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['publishers'], meta: { name: 'publishers' } }
    /**
     * Find zero or one Publishers that matches the filter.
     * @param {publishersFindUniqueArgs} args - Arguments to find a Publishers
     * @example
     * // Get one Publishers
     * const publishers = await prisma.publishers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends publishersFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, publishersFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'publishers'> extends True ? Prisma__publishersClient<$Types.GetResult<publishersPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__publishersClient<$Types.GetResult<publishersPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Publishers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {publishersFindUniqueOrThrowArgs} args - Arguments to find a Publishers
     * @example
     * // Get one Publishers
     * const publishers = await prisma.publishers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends publishersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, publishersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__publishersClient<$Types.GetResult<publishersPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Publishers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {publishersFindFirstArgs} args - Arguments to find a Publishers
     * @example
     * // Get one Publishers
     * const publishers = await prisma.publishers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends publishersFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, publishersFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'publishers'> extends True ? Prisma__publishersClient<$Types.GetResult<publishersPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__publishersClient<$Types.GetResult<publishersPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Publishers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {publishersFindFirstOrThrowArgs} args - Arguments to find a Publishers
     * @example
     * // Get one Publishers
     * const publishers = await prisma.publishers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends publishersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, publishersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__publishersClient<$Types.GetResult<publishersPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Publishers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {publishersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Publishers
     * const publishers = await prisma.publishers.findMany()
     * 
     * // Get first 10 Publishers
     * const publishers = await prisma.publishers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const publishersWithIdOnly = await prisma.publishers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends publishersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, publishersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<publishersPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Publishers.
     * @param {publishersCreateArgs} args - Arguments to create a Publishers.
     * @example
     * // Create one Publishers
     * const Publishers = await prisma.publishers.create({
     *   data: {
     *     // ... data to create a Publishers
     *   }
     * })
     * 
    **/
    create<T extends publishersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, publishersCreateArgs<ExtArgs>>
    ): Prisma__publishersClient<$Types.GetResult<publishersPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Publishers.
     *     @param {publishersCreateManyArgs} args - Arguments to create many Publishers.
     *     @example
     *     // Create many Publishers
     *     const publishers = await prisma.publishers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends publishersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, publishersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Publishers.
     * @param {publishersDeleteArgs} args - Arguments to delete one Publishers.
     * @example
     * // Delete one Publishers
     * const Publishers = await prisma.publishers.delete({
     *   where: {
     *     // ... filter to delete one Publishers
     *   }
     * })
     * 
    **/
    delete<T extends publishersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, publishersDeleteArgs<ExtArgs>>
    ): Prisma__publishersClient<$Types.GetResult<publishersPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Publishers.
     * @param {publishersUpdateArgs} args - Arguments to update one Publishers.
     * @example
     * // Update one Publishers
     * const publishers = await prisma.publishers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends publishersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, publishersUpdateArgs<ExtArgs>>
    ): Prisma__publishersClient<$Types.GetResult<publishersPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Publishers.
     * @param {publishersDeleteManyArgs} args - Arguments to filter Publishers to delete.
     * @example
     * // Delete a few Publishers
     * const { count } = await prisma.publishers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends publishersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, publishersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Publishers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {publishersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Publishers
     * const publishers = await prisma.publishers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends publishersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, publishersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Publishers.
     * @param {publishersUpsertArgs} args - Arguments to update or create a Publishers.
     * @example
     * // Update or create a Publishers
     * const publishers = await prisma.publishers.upsert({
     *   create: {
     *     // ... data to create a Publishers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Publishers we want to update
     *   }
     * })
    **/
    upsert<T extends publishersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, publishersUpsertArgs<ExtArgs>>
    ): Prisma__publishersClient<$Types.GetResult<publishersPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Publishers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {publishersCountArgs} args - Arguments to filter Publishers to count.
     * @example
     * // Count the number of Publishers
     * const count = await prisma.publishers.count({
     *   where: {
     *     // ... the filter for the Publishers we want to count
     *   }
     * })
    **/
    count<T extends publishersCountArgs>(
      args?: Subset<T, publishersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PublishersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Publishers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PublishersAggregateArgs>(args: Subset<T, PublishersAggregateArgs>): Prisma.PrismaPromise<GetPublishersAggregateType<T>>

    /**
     * Group by Publishers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PublishersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PublishersGroupByArgs['orderBy'] }
        : { orderBy?: PublishersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PublishersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublishersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for publishers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__publishersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    book<T extends publishers$bookArgs<ExtArgs> = {}>(args?: Subset<T, publishers$bookArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<booksPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * publishers base type for findUnique actions
   */
  export type publishersFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publishers
     */
    select?: publishersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publishersInclude<ExtArgs> | null
    /**
     * Filter, which publishers to fetch.
     */
    where: publishersWhereUniqueInput
  }

  /**
   * publishers findUnique
   */
  export interface publishersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends publishersFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * publishers findUniqueOrThrow
   */
  export type publishersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publishers
     */
    select?: publishersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publishersInclude<ExtArgs> | null
    /**
     * Filter, which publishers to fetch.
     */
    where: publishersWhereUniqueInput
  }


  /**
   * publishers base type for findFirst actions
   */
  export type publishersFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publishers
     */
    select?: publishersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publishersInclude<ExtArgs> | null
    /**
     * Filter, which publishers to fetch.
     */
    where?: publishersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of publishers to fetch.
     */
    orderBy?: Enumerable<publishersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for publishers.
     */
    cursor?: publishersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` publishers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` publishers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of publishers.
     */
    distinct?: Enumerable<PublishersScalarFieldEnum>
  }

  /**
   * publishers findFirst
   */
  export interface publishersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends publishersFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * publishers findFirstOrThrow
   */
  export type publishersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publishers
     */
    select?: publishersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publishersInclude<ExtArgs> | null
    /**
     * Filter, which publishers to fetch.
     */
    where?: publishersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of publishers to fetch.
     */
    orderBy?: Enumerable<publishersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for publishers.
     */
    cursor?: publishersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` publishers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` publishers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of publishers.
     */
    distinct?: Enumerable<PublishersScalarFieldEnum>
  }


  /**
   * publishers findMany
   */
  export type publishersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publishers
     */
    select?: publishersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publishersInclude<ExtArgs> | null
    /**
     * Filter, which publishers to fetch.
     */
    where?: publishersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of publishers to fetch.
     */
    orderBy?: Enumerable<publishersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing publishers.
     */
    cursor?: publishersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` publishers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` publishers.
     */
    skip?: number
    distinct?: Enumerable<PublishersScalarFieldEnum>
  }


  /**
   * publishers create
   */
  export type publishersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publishers
     */
    select?: publishersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publishersInclude<ExtArgs> | null
    /**
     * The data needed to create a publishers.
     */
    data: XOR<publishersCreateInput, publishersUncheckedCreateInput>
  }


  /**
   * publishers createMany
   */
  export type publishersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many publishers.
     */
    data: Enumerable<publishersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * publishers update
   */
  export type publishersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publishers
     */
    select?: publishersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publishersInclude<ExtArgs> | null
    /**
     * The data needed to update a publishers.
     */
    data: XOR<publishersUpdateInput, publishersUncheckedUpdateInput>
    /**
     * Choose, which publishers to update.
     */
    where: publishersWhereUniqueInput
  }


  /**
   * publishers updateMany
   */
  export type publishersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update publishers.
     */
    data: XOR<publishersUpdateManyMutationInput, publishersUncheckedUpdateManyInput>
    /**
     * Filter which publishers to update
     */
    where?: publishersWhereInput
  }


  /**
   * publishers upsert
   */
  export type publishersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publishers
     */
    select?: publishersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publishersInclude<ExtArgs> | null
    /**
     * The filter to search for the publishers to update in case it exists.
     */
    where: publishersWhereUniqueInput
    /**
     * In case the publishers found by the `where` argument doesn't exist, create a new publishers with this data.
     */
    create: XOR<publishersCreateInput, publishersUncheckedCreateInput>
    /**
     * In case the publishers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<publishersUpdateInput, publishersUncheckedUpdateInput>
  }


  /**
   * publishers delete
   */
  export type publishersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publishers
     */
    select?: publishersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publishersInclude<ExtArgs> | null
    /**
     * Filter which publishers to delete.
     */
    where: publishersWhereUniqueInput
  }


  /**
   * publishers deleteMany
   */
  export type publishersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which publishers to delete
     */
    where?: publishersWhereInput
  }


  /**
   * publishers.book
   */
  export type publishers$bookArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: booksInclude<ExtArgs> | null
    where?: booksWhereInput
    orderBy?: Enumerable<booksOrderByWithRelationInput>
    cursor?: booksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BooksScalarFieldEnum>
  }


  /**
   * publishers without action
   */
  export type publishersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publishers
     */
    select?: publishersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publishersInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    fullname: 'fullname',
    email: 'email',
    password: 'password',
    JMBG: 'JMBG',
    remember_token: 'remember_token',
    photo: 'photo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const AuthorsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type AuthorsScalarFieldEnum = (typeof AuthorsScalarFieldEnum)[keyof typeof AuthorsScalarFieldEnum]


  export const CategoriesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const BooksScalarFieldEnum: {
    id: 'id',
    title: 'title',
    summary: 'summary',
    year: 'year',
    bindingId: 'bindingId',
    formatId: 'formatId',
    languageId: 'languageId',
    publisherId: 'publisherId'
  };

  export type BooksScalarFieldEnum = (typeof BooksScalarFieldEnum)[keyof typeof BooksScalarFieldEnum]


  export const Book_categoriesScalarFieldEnum: {
    id: 'id',
    bookId: 'bookId',
    cathegorieId: 'cathegorieId'
  };

  export type Book_categoriesScalarFieldEnum = (typeof Book_categoriesScalarFieldEnum)[keyof typeof Book_categoriesScalarFieldEnum]


  export const Book_authorsScalarFieldEnum: {
    id: 'id',
    bookId: 'bookId',
    authorId: 'authorId'
  };

  export type Book_authorsScalarFieldEnum = (typeof Book_authorsScalarFieldEnum)[keyof typeof Book_authorsScalarFieldEnum]


  export const CoversScalarFieldEnum: {
    id: 'id',
    url: 'url',
    booksId: 'booksId'
  };

  export type CoversScalarFieldEnum = (typeof CoversScalarFieldEnum)[keyof typeof CoversScalarFieldEnum]


  export const BindingsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type BindingsScalarFieldEnum = (typeof BindingsScalarFieldEnum)[keyof typeof BindingsScalarFieldEnum]


  export const FormatsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type FormatsScalarFieldEnum = (typeof FormatsScalarFieldEnum)[keyof typeof FormatsScalarFieldEnum]


  export const LanguagesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type LanguagesScalarFieldEnum = (typeof LanguagesScalarFieldEnum)[keyof typeof LanguagesScalarFieldEnum]


  export const PublishersScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type PublishersScalarFieldEnum = (typeof PublishersScalarFieldEnum)[keyof typeof PublishersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    fullname?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    JMBG?: StringFilter | string
    remember_token?: StringNullableFilter | string | null
    photo?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    JMBG?: SortOrder
    remember_token?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersWhereUniqueInput = {
    id?: number
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    JMBG?: SortOrder
    remember_token?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    fullname?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    JMBG?: StringWithAggregatesFilter | string
    remember_token?: StringNullableWithAggregatesFilter | string | null
    photo?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type authorsWhereInput = {
    AND?: Enumerable<authorsWhereInput>
    OR?: Enumerable<authorsWhereInput>
    NOT?: Enumerable<authorsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    book_authors?: Book_authorsListRelationFilter
  }

  export type authorsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    book_authors?: book_authorsOrderByRelationAggregateInput
  }

  export type authorsWhereUniqueInput = {
    id?: number
  }

  export type authorsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: authorsCountOrderByAggregateInput
    _avg?: authorsAvgOrderByAggregateInput
    _max?: authorsMaxOrderByAggregateInput
    _min?: authorsMinOrderByAggregateInput
    _sum?: authorsSumOrderByAggregateInput
  }

  export type authorsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<authorsScalarWhereWithAggregatesInput>
    OR?: Enumerable<authorsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<authorsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type categoriesWhereInput = {
    AND?: Enumerable<categoriesWhereInput>
    OR?: Enumerable<categoriesWhereInput>
    NOT?: Enumerable<categoriesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    book_categories?: Book_categoriesListRelationFilter
  }

  export type categoriesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    book_categories?: book_categoriesOrderByRelationAggregateInput
  }

  export type categoriesWhereUniqueInput = {
    id?: number
  }

  export type categoriesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: categoriesCountOrderByAggregateInput
    _avg?: categoriesAvgOrderByAggregateInput
    _max?: categoriesMaxOrderByAggregateInput
    _min?: categoriesMinOrderByAggregateInput
    _sum?: categoriesSumOrderByAggregateInput
  }

  export type categoriesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<categoriesScalarWhereWithAggregatesInput>
    OR?: Enumerable<categoriesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<categoriesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type booksWhereInput = {
    AND?: Enumerable<booksWhereInput>
    OR?: Enumerable<booksWhereInput>
    NOT?: Enumerable<booksWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    summary?: StringFilter | string
    year?: StringFilter | string
    bindingId?: IntFilter | number
    formatId?: IntNullableFilter | number | null
    languageId?: IntFilter | number
    publisherId?: IntFilter | number
    bindings?: XOR<BindingsRelationFilter, bindingsWhereInput>
    formats?: XOR<FormatsRelationFilter, formatsWhereInput> | null
    languages?: XOR<LanguagesRelationFilter, languagesWhereInput>
    publishers?: XOR<PublishersRelationFilter, publishersWhereInput>
    book_authors?: Book_authorsListRelationFilter
    book_categories?: Book_categoriesListRelationFilter
    covers?: CoversListRelationFilter
  }

  export type booksOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    year?: SortOrder
    bindingId?: SortOrder
    formatId?: SortOrderInput | SortOrder
    languageId?: SortOrder
    publisherId?: SortOrder
    bindings?: bindingsOrderByWithRelationInput
    formats?: formatsOrderByWithRelationInput
    languages?: languagesOrderByWithRelationInput
    publishers?: publishersOrderByWithRelationInput
    book_authors?: book_authorsOrderByRelationAggregateInput
    book_categories?: book_categoriesOrderByRelationAggregateInput
    covers?: coversOrderByRelationAggregateInput
  }

  export type booksWhereUniqueInput = {
    id?: number
  }

  export type booksOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    year?: SortOrder
    bindingId?: SortOrder
    formatId?: SortOrderInput | SortOrder
    languageId?: SortOrder
    publisherId?: SortOrder
    _count?: booksCountOrderByAggregateInput
    _avg?: booksAvgOrderByAggregateInput
    _max?: booksMaxOrderByAggregateInput
    _min?: booksMinOrderByAggregateInput
    _sum?: booksSumOrderByAggregateInput
  }

  export type booksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<booksScalarWhereWithAggregatesInput>
    OR?: Enumerable<booksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<booksScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    summary?: StringWithAggregatesFilter | string
    year?: StringWithAggregatesFilter | string
    bindingId?: IntWithAggregatesFilter | number
    formatId?: IntNullableWithAggregatesFilter | number | null
    languageId?: IntWithAggregatesFilter | number
    publisherId?: IntWithAggregatesFilter | number
  }

  export type book_categoriesWhereInput = {
    AND?: Enumerable<book_categoriesWhereInput>
    OR?: Enumerable<book_categoriesWhereInput>
    NOT?: Enumerable<book_categoriesWhereInput>
    id?: IntFilter | number
    bookId?: IntFilter | number
    cathegorieId?: IntFilter | number
    book?: XOR<BooksRelationFilter, booksWhereInput>
    categorie?: XOR<CategoriesRelationFilter, categoriesWhereInput>
  }

  export type book_categoriesOrderByWithRelationInput = {
    id?: SortOrder
    bookId?: SortOrder
    cathegorieId?: SortOrder
    book?: booksOrderByWithRelationInput
    categorie?: categoriesOrderByWithRelationInput
  }

  export type book_categoriesWhereUniqueInput = {
    id?: number
  }

  export type book_categoriesOrderByWithAggregationInput = {
    id?: SortOrder
    bookId?: SortOrder
    cathegorieId?: SortOrder
    _count?: book_categoriesCountOrderByAggregateInput
    _avg?: book_categoriesAvgOrderByAggregateInput
    _max?: book_categoriesMaxOrderByAggregateInput
    _min?: book_categoriesMinOrderByAggregateInput
    _sum?: book_categoriesSumOrderByAggregateInput
  }

  export type book_categoriesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<book_categoriesScalarWhereWithAggregatesInput>
    OR?: Enumerable<book_categoriesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<book_categoriesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    bookId?: IntWithAggregatesFilter | number
    cathegorieId?: IntWithAggregatesFilter | number
  }

  export type book_authorsWhereInput = {
    AND?: Enumerable<book_authorsWhereInput>
    OR?: Enumerable<book_authorsWhereInput>
    NOT?: Enumerable<book_authorsWhereInput>
    id?: IntFilter | number
    bookId?: IntFilter | number
    authorId?: IntFilter | number
    book?: XOR<BooksRelationFilter, booksWhereInput>
    author?: XOR<AuthorsRelationFilter, authorsWhereInput>
  }

  export type book_authorsOrderByWithRelationInput = {
    id?: SortOrder
    bookId?: SortOrder
    authorId?: SortOrder
    book?: booksOrderByWithRelationInput
    author?: authorsOrderByWithRelationInput
  }

  export type book_authorsWhereUniqueInput = {
    id?: number
  }

  export type book_authorsOrderByWithAggregationInput = {
    id?: SortOrder
    bookId?: SortOrder
    authorId?: SortOrder
    _count?: book_authorsCountOrderByAggregateInput
    _avg?: book_authorsAvgOrderByAggregateInput
    _max?: book_authorsMaxOrderByAggregateInput
    _min?: book_authorsMinOrderByAggregateInput
    _sum?: book_authorsSumOrderByAggregateInput
  }

  export type book_authorsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<book_authorsScalarWhereWithAggregatesInput>
    OR?: Enumerable<book_authorsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<book_authorsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    bookId?: IntWithAggregatesFilter | number
    authorId?: IntWithAggregatesFilter | number
  }

  export type coversWhereInput = {
    AND?: Enumerable<coversWhereInput>
    OR?: Enumerable<coversWhereInput>
    NOT?: Enumerable<coversWhereInput>
    id?: IntFilter | number
    url?: StringFilter | string
    booksId?: IntFilter | number
    book?: XOR<BooksRelationFilter, booksWhereInput>
  }

  export type coversOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    booksId?: SortOrder
    book?: booksOrderByWithRelationInput
  }

  export type coversWhereUniqueInput = {
    id?: number
  }

  export type coversOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    booksId?: SortOrder
    _count?: coversCountOrderByAggregateInput
    _avg?: coversAvgOrderByAggregateInput
    _max?: coversMaxOrderByAggregateInput
    _min?: coversMinOrderByAggregateInput
    _sum?: coversSumOrderByAggregateInput
  }

  export type coversScalarWhereWithAggregatesInput = {
    AND?: Enumerable<coversScalarWhereWithAggregatesInput>
    OR?: Enumerable<coversScalarWhereWithAggregatesInput>
    NOT?: Enumerable<coversScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    url?: StringWithAggregatesFilter | string
    booksId?: IntWithAggregatesFilter | number
  }

  export type bindingsWhereInput = {
    AND?: Enumerable<bindingsWhereInput>
    OR?: Enumerable<bindingsWhereInput>
    NOT?: Enumerable<bindingsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    book?: BooksListRelationFilter
  }

  export type bindingsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    book?: booksOrderByRelationAggregateInput
  }

  export type bindingsWhereUniqueInput = {
    id?: number
  }

  export type bindingsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: bindingsCountOrderByAggregateInput
    _avg?: bindingsAvgOrderByAggregateInput
    _max?: bindingsMaxOrderByAggregateInput
    _min?: bindingsMinOrderByAggregateInput
    _sum?: bindingsSumOrderByAggregateInput
  }

  export type bindingsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<bindingsScalarWhereWithAggregatesInput>
    OR?: Enumerable<bindingsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<bindingsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type formatsWhereInput = {
    AND?: Enumerable<formatsWhereInput>
    OR?: Enumerable<formatsWhereInput>
    NOT?: Enumerable<formatsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    book?: BooksListRelationFilter
  }

  export type formatsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    book?: booksOrderByRelationAggregateInput
  }

  export type formatsWhereUniqueInput = {
    id?: number
  }

  export type formatsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: formatsCountOrderByAggregateInput
    _avg?: formatsAvgOrderByAggregateInput
    _max?: formatsMaxOrderByAggregateInput
    _min?: formatsMinOrderByAggregateInput
    _sum?: formatsSumOrderByAggregateInput
  }

  export type formatsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<formatsScalarWhereWithAggregatesInput>
    OR?: Enumerable<formatsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<formatsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type languagesWhereInput = {
    AND?: Enumerable<languagesWhereInput>
    OR?: Enumerable<languagesWhereInput>
    NOT?: Enumerable<languagesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    book?: BooksListRelationFilter
  }

  export type languagesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    book?: booksOrderByRelationAggregateInput
  }

  export type languagesWhereUniqueInput = {
    id?: number
  }

  export type languagesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: languagesCountOrderByAggregateInput
    _avg?: languagesAvgOrderByAggregateInput
    _max?: languagesMaxOrderByAggregateInput
    _min?: languagesMinOrderByAggregateInput
    _sum?: languagesSumOrderByAggregateInput
  }

  export type languagesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<languagesScalarWhereWithAggregatesInput>
    OR?: Enumerable<languagesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<languagesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type publishersWhereInput = {
    AND?: Enumerable<publishersWhereInput>
    OR?: Enumerable<publishersWhereInput>
    NOT?: Enumerable<publishersWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    book?: BooksListRelationFilter
  }

  export type publishersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    book?: booksOrderByRelationAggregateInput
  }

  export type publishersWhereUniqueInput = {
    id?: number
  }

  export type publishersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: publishersCountOrderByAggregateInput
    _avg?: publishersAvgOrderByAggregateInput
    _max?: publishersMaxOrderByAggregateInput
    _min?: publishersMinOrderByAggregateInput
    _sum?: publishersSumOrderByAggregateInput
  }

  export type publishersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<publishersScalarWhereWithAggregatesInput>
    OR?: Enumerable<publishersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<publishersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type usersCreateInput = {
    username: string
    fullname: string
    email: string
    password: string
    JMBG: string
    remember_token?: string | null
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersUncheckedCreateInput = {
    id?: number
    username: string
    fullname: string
    email: string
    password: string
    JMBG: string
    remember_token?: string | null
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    JMBG?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    JMBG?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateManyInput = {
    id?: number
    username: string
    fullname: string
    email: string
    password: string
    JMBG: string
    remember_token?: string | null
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    JMBG?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    JMBG?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authorsCreateInput = {
    name: string
    book_authors?: book_authorsCreateNestedManyWithoutAuthorInput
  }

  export type authorsUncheckedCreateInput = {
    id?: number
    name: string
    book_authors?: book_authorsUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type authorsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    book_authors?: book_authorsUpdateManyWithoutAuthorNestedInput
  }

  export type authorsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    book_authors?: book_authorsUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type authorsCreateManyInput = {
    id?: number
    name: string
  }

  export type authorsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type authorsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesCreateInput = {
    name: string
    book_categories?: book_categoriesCreateNestedManyWithoutCategorieInput
  }

  export type categoriesUncheckedCreateInput = {
    id?: number
    name: string
    book_categories?: book_categoriesUncheckedCreateNestedManyWithoutCategorieInput
  }

  export type categoriesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    book_categories?: book_categoriesUpdateManyWithoutCategorieNestedInput
  }

  export type categoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    book_categories?: book_categoriesUncheckedUpdateManyWithoutCategorieNestedInput
  }

  export type categoriesCreateManyInput = {
    id?: number
    name: string
  }

  export type categoriesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type booksCreateInput = {
    title: string
    summary: string
    year: string
    bindings: bindingsCreateNestedOneWithoutBookInput
    formats?: formatsCreateNestedOneWithoutBookInput
    languages: languagesCreateNestedOneWithoutBookInput
    publishers: publishersCreateNestedOneWithoutBookInput
    book_authors?: book_authorsCreateNestedManyWithoutBookInput
    book_categories?: book_categoriesCreateNestedManyWithoutBookInput
    covers?: coversCreateNestedManyWithoutBookInput
  }

  export type booksUncheckedCreateInput = {
    id?: number
    title: string
    summary: string
    year: string
    bindingId: number
    formatId?: number | null
    languageId: number
    publisherId: number
    book_authors?: book_authorsUncheckedCreateNestedManyWithoutBookInput
    book_categories?: book_categoriesUncheckedCreateNestedManyWithoutBookInput
    covers?: coversUncheckedCreateNestedManyWithoutBookInput
  }

  export type booksUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindings?: bindingsUpdateOneRequiredWithoutBookNestedInput
    formats?: formatsUpdateOneWithoutBookNestedInput
    languages?: languagesUpdateOneRequiredWithoutBookNestedInput
    publishers?: publishersUpdateOneRequiredWithoutBookNestedInput
    book_authors?: book_authorsUpdateManyWithoutBookNestedInput
    book_categories?: book_categoriesUpdateManyWithoutBookNestedInput
    covers?: coversUpdateManyWithoutBookNestedInput
  }

  export type booksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindingId?: IntFieldUpdateOperationsInput | number
    formatId?: NullableIntFieldUpdateOperationsInput | number | null
    languageId?: IntFieldUpdateOperationsInput | number
    publisherId?: IntFieldUpdateOperationsInput | number
    book_authors?: book_authorsUncheckedUpdateManyWithoutBookNestedInput
    book_categories?: book_categoriesUncheckedUpdateManyWithoutBookNestedInput
    covers?: coversUncheckedUpdateManyWithoutBookNestedInput
  }

  export type booksCreateManyInput = {
    id?: number
    title: string
    summary: string
    year: string
    bindingId: number
    formatId?: number | null
    languageId: number
    publisherId: number
  }

  export type booksUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
  }

  export type booksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindingId?: IntFieldUpdateOperationsInput | number
    formatId?: NullableIntFieldUpdateOperationsInput | number | null
    languageId?: IntFieldUpdateOperationsInput | number
    publisherId?: IntFieldUpdateOperationsInput | number
  }

  export type book_categoriesCreateInput = {
    book: booksCreateNestedOneWithoutBook_categoriesInput
    categorie: categoriesCreateNestedOneWithoutBook_categoriesInput
  }

  export type book_categoriesUncheckedCreateInput = {
    id?: number
    bookId: number
    cathegorieId: number
  }

  export type book_categoriesUpdateInput = {
    book?: booksUpdateOneRequiredWithoutBook_categoriesNestedInput
    categorie?: categoriesUpdateOneRequiredWithoutBook_categoriesNestedInput
  }

  export type book_categoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    cathegorieId?: IntFieldUpdateOperationsInput | number
  }

  export type book_categoriesCreateManyInput = {
    id?: number
    bookId: number
    cathegorieId: number
  }

  export type book_categoriesUpdateManyMutationInput = {

  }

  export type book_categoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    cathegorieId?: IntFieldUpdateOperationsInput | number
  }

  export type book_authorsCreateInput = {
    book: booksCreateNestedOneWithoutBook_authorsInput
    author: authorsCreateNestedOneWithoutBook_authorsInput
  }

  export type book_authorsUncheckedCreateInput = {
    id?: number
    bookId: number
    authorId: number
  }

  export type book_authorsUpdateInput = {
    book?: booksUpdateOneRequiredWithoutBook_authorsNestedInput
    author?: authorsUpdateOneRequiredWithoutBook_authorsNestedInput
  }

  export type book_authorsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
  }

  export type book_authorsCreateManyInput = {
    id?: number
    bookId: number
    authorId: number
  }

  export type book_authorsUpdateManyMutationInput = {

  }

  export type book_authorsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
  }

  export type coversCreateInput = {
    url: string
    book: booksCreateNestedOneWithoutCoversInput
  }

  export type coversUncheckedCreateInput = {
    id?: number
    url: string
    booksId: number
  }

  export type coversUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    book?: booksUpdateOneRequiredWithoutCoversNestedInput
  }

  export type coversUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    booksId?: IntFieldUpdateOperationsInput | number
  }

  export type coversCreateManyInput = {
    id?: number
    url: string
    booksId: number
  }

  export type coversUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type coversUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    booksId?: IntFieldUpdateOperationsInput | number
  }

  export type bindingsCreateInput = {
    name: string
    book?: booksCreateNestedManyWithoutBindingsInput
  }

  export type bindingsUncheckedCreateInput = {
    id?: number
    name: string
    book?: booksUncheckedCreateNestedManyWithoutBindingsInput
  }

  export type bindingsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    book?: booksUpdateManyWithoutBindingsNestedInput
  }

  export type bindingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    book?: booksUncheckedUpdateManyWithoutBindingsNestedInput
  }

  export type bindingsCreateManyInput = {
    id?: number
    name: string
  }

  export type bindingsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type bindingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type formatsCreateInput = {
    name: string
    book?: booksCreateNestedManyWithoutFormatsInput
  }

  export type formatsUncheckedCreateInput = {
    id?: number
    name: string
    book?: booksUncheckedCreateNestedManyWithoutFormatsInput
  }

  export type formatsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    book?: booksUpdateManyWithoutFormatsNestedInput
  }

  export type formatsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    book?: booksUncheckedUpdateManyWithoutFormatsNestedInput
  }

  export type formatsCreateManyInput = {
    id?: number
    name: string
  }

  export type formatsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type formatsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type languagesCreateInput = {
    name: string
    book?: booksCreateNestedManyWithoutLanguagesInput
  }

  export type languagesUncheckedCreateInput = {
    id?: number
    name: string
    book?: booksUncheckedCreateNestedManyWithoutLanguagesInput
  }

  export type languagesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    book?: booksUpdateManyWithoutLanguagesNestedInput
  }

  export type languagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    book?: booksUncheckedUpdateManyWithoutLanguagesNestedInput
  }

  export type languagesCreateManyInput = {
    id?: number
    name: string
  }

  export type languagesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type languagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type publishersCreateInput = {
    name: string
    book?: booksCreateNestedManyWithoutPublishersInput
  }

  export type publishersUncheckedCreateInput = {
    id?: number
    name: string
    book?: booksUncheckedCreateNestedManyWithoutPublishersInput
  }

  export type publishersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    book?: booksUpdateManyWithoutPublishersNestedInput
  }

  export type publishersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    book?: booksUncheckedUpdateManyWithoutPublishersNestedInput
  }

  export type publishersCreateManyInput = {
    id?: number
    name: string
  }

  export type publishersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type publishersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    JMBG?: SortOrder
    remember_token?: SortOrder
    photo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    JMBG?: SortOrder
    remember_token?: SortOrder
    photo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    JMBG?: SortOrder
    remember_token?: SortOrder
    photo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type Book_authorsListRelationFilter = {
    every?: book_authorsWhereInput
    some?: book_authorsWhereInput
    none?: book_authorsWhereInput
  }

  export type book_authorsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type authorsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type authorsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type authorsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type authorsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type authorsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Book_categoriesListRelationFilter = {
    every?: book_categoriesWhereInput
    some?: book_categoriesWhereInput
    none?: book_categoriesWhereInput
  }

  export type book_categoriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoriesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type categoriesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type categoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type categoriesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type categoriesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BindingsRelationFilter = {
    is?: bindingsWhereInput | null
    isNot?: bindingsWhereInput | null
  }

  export type FormatsRelationFilter = {
    is?: formatsWhereInput | null
    isNot?: formatsWhereInput | null
  }

  export type LanguagesRelationFilter = {
    is?: languagesWhereInput | null
    isNot?: languagesWhereInput | null
  }

  export type PublishersRelationFilter = {
    is?: publishersWhereInput | null
    isNot?: publishersWhereInput | null
  }

  export type CoversListRelationFilter = {
    every?: coversWhereInput
    some?: coversWhereInput
    none?: coversWhereInput
  }

  export type coversOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type booksCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    year?: SortOrder
    bindingId?: SortOrder
    formatId?: SortOrder
    languageId?: SortOrder
    publisherId?: SortOrder
  }

  export type booksAvgOrderByAggregateInput = {
    id?: SortOrder
    bindingId?: SortOrder
    formatId?: SortOrder
    languageId?: SortOrder
    publisherId?: SortOrder
  }

  export type booksMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    year?: SortOrder
    bindingId?: SortOrder
    formatId?: SortOrder
    languageId?: SortOrder
    publisherId?: SortOrder
  }

  export type booksMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    year?: SortOrder
    bindingId?: SortOrder
    formatId?: SortOrder
    languageId?: SortOrder
    publisherId?: SortOrder
  }

  export type booksSumOrderByAggregateInput = {
    id?: SortOrder
    bindingId?: SortOrder
    formatId?: SortOrder
    languageId?: SortOrder
    publisherId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BooksRelationFilter = {
    is?: booksWhereInput | null
    isNot?: booksWhereInput | null
  }

  export type CategoriesRelationFilter = {
    is?: categoriesWhereInput | null
    isNot?: categoriesWhereInput | null
  }

  export type book_categoriesCountOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    cathegorieId?: SortOrder
  }

  export type book_categoriesAvgOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    cathegorieId?: SortOrder
  }

  export type book_categoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    cathegorieId?: SortOrder
  }

  export type book_categoriesMinOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    cathegorieId?: SortOrder
  }

  export type book_categoriesSumOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    cathegorieId?: SortOrder
  }

  export type AuthorsRelationFilter = {
    is?: authorsWhereInput | null
    isNot?: authorsWhereInput | null
  }

  export type book_authorsCountOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    authorId?: SortOrder
  }

  export type book_authorsAvgOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    authorId?: SortOrder
  }

  export type book_authorsMaxOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    authorId?: SortOrder
  }

  export type book_authorsMinOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    authorId?: SortOrder
  }

  export type book_authorsSumOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    authorId?: SortOrder
  }

  export type coversCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    booksId?: SortOrder
  }

  export type coversAvgOrderByAggregateInput = {
    id?: SortOrder
    booksId?: SortOrder
  }

  export type coversMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    booksId?: SortOrder
  }

  export type coversMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    booksId?: SortOrder
  }

  export type coversSumOrderByAggregateInput = {
    id?: SortOrder
    booksId?: SortOrder
  }

  export type BooksListRelationFilter = {
    every?: booksWhereInput
    some?: booksWhereInput
    none?: booksWhereInput
  }

  export type booksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type bindingsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type bindingsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type bindingsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type bindingsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type bindingsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type formatsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type formatsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type formatsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type formatsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type formatsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type languagesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type languagesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type languagesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type languagesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type languagesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type publishersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type publishersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type publishersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type publishersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type publishersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type book_authorsCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<book_authorsCreateWithoutAuthorInput>, Enumerable<book_authorsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<book_authorsCreateOrConnectWithoutAuthorInput>
    createMany?: book_authorsCreateManyAuthorInputEnvelope
    connect?: Enumerable<book_authorsWhereUniqueInput>
  }

  export type book_authorsUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<book_authorsCreateWithoutAuthorInput>, Enumerable<book_authorsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<book_authorsCreateOrConnectWithoutAuthorInput>
    createMany?: book_authorsCreateManyAuthorInputEnvelope
    connect?: Enumerable<book_authorsWhereUniqueInput>
  }

  export type book_authorsUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<book_authorsCreateWithoutAuthorInput>, Enumerable<book_authorsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<book_authorsCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<book_authorsUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: book_authorsCreateManyAuthorInputEnvelope
    set?: Enumerable<book_authorsWhereUniqueInput>
    disconnect?: Enumerable<book_authorsWhereUniqueInput>
    delete?: Enumerable<book_authorsWhereUniqueInput>
    connect?: Enumerable<book_authorsWhereUniqueInput>
    update?: Enumerable<book_authorsUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<book_authorsUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<book_authorsScalarWhereInput>
  }

  export type book_authorsUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<book_authorsCreateWithoutAuthorInput>, Enumerable<book_authorsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<book_authorsCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<book_authorsUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: book_authorsCreateManyAuthorInputEnvelope
    set?: Enumerable<book_authorsWhereUniqueInput>
    disconnect?: Enumerable<book_authorsWhereUniqueInput>
    delete?: Enumerable<book_authorsWhereUniqueInput>
    connect?: Enumerable<book_authorsWhereUniqueInput>
    update?: Enumerable<book_authorsUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<book_authorsUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<book_authorsScalarWhereInput>
  }

  export type book_categoriesCreateNestedManyWithoutCategorieInput = {
    create?: XOR<Enumerable<book_categoriesCreateWithoutCategorieInput>, Enumerable<book_categoriesUncheckedCreateWithoutCategorieInput>>
    connectOrCreate?: Enumerable<book_categoriesCreateOrConnectWithoutCategorieInput>
    createMany?: book_categoriesCreateManyCategorieInputEnvelope
    connect?: Enumerable<book_categoriesWhereUniqueInput>
  }

  export type book_categoriesUncheckedCreateNestedManyWithoutCategorieInput = {
    create?: XOR<Enumerable<book_categoriesCreateWithoutCategorieInput>, Enumerable<book_categoriesUncheckedCreateWithoutCategorieInput>>
    connectOrCreate?: Enumerable<book_categoriesCreateOrConnectWithoutCategorieInput>
    createMany?: book_categoriesCreateManyCategorieInputEnvelope
    connect?: Enumerable<book_categoriesWhereUniqueInput>
  }

  export type book_categoriesUpdateManyWithoutCategorieNestedInput = {
    create?: XOR<Enumerable<book_categoriesCreateWithoutCategorieInput>, Enumerable<book_categoriesUncheckedCreateWithoutCategorieInput>>
    connectOrCreate?: Enumerable<book_categoriesCreateOrConnectWithoutCategorieInput>
    upsert?: Enumerable<book_categoriesUpsertWithWhereUniqueWithoutCategorieInput>
    createMany?: book_categoriesCreateManyCategorieInputEnvelope
    set?: Enumerable<book_categoriesWhereUniqueInput>
    disconnect?: Enumerable<book_categoriesWhereUniqueInput>
    delete?: Enumerable<book_categoriesWhereUniqueInput>
    connect?: Enumerable<book_categoriesWhereUniqueInput>
    update?: Enumerable<book_categoriesUpdateWithWhereUniqueWithoutCategorieInput>
    updateMany?: Enumerable<book_categoriesUpdateManyWithWhereWithoutCategorieInput>
    deleteMany?: Enumerable<book_categoriesScalarWhereInput>
  }

  export type book_categoriesUncheckedUpdateManyWithoutCategorieNestedInput = {
    create?: XOR<Enumerable<book_categoriesCreateWithoutCategorieInput>, Enumerable<book_categoriesUncheckedCreateWithoutCategorieInput>>
    connectOrCreate?: Enumerable<book_categoriesCreateOrConnectWithoutCategorieInput>
    upsert?: Enumerable<book_categoriesUpsertWithWhereUniqueWithoutCategorieInput>
    createMany?: book_categoriesCreateManyCategorieInputEnvelope
    set?: Enumerable<book_categoriesWhereUniqueInput>
    disconnect?: Enumerable<book_categoriesWhereUniqueInput>
    delete?: Enumerable<book_categoriesWhereUniqueInput>
    connect?: Enumerable<book_categoriesWhereUniqueInput>
    update?: Enumerable<book_categoriesUpdateWithWhereUniqueWithoutCategorieInput>
    updateMany?: Enumerable<book_categoriesUpdateManyWithWhereWithoutCategorieInput>
    deleteMany?: Enumerable<book_categoriesScalarWhereInput>
  }

  export type bindingsCreateNestedOneWithoutBookInput = {
    create?: XOR<bindingsCreateWithoutBookInput, bindingsUncheckedCreateWithoutBookInput>
    connectOrCreate?: bindingsCreateOrConnectWithoutBookInput
    connect?: bindingsWhereUniqueInput
  }

  export type formatsCreateNestedOneWithoutBookInput = {
    create?: XOR<formatsCreateWithoutBookInput, formatsUncheckedCreateWithoutBookInput>
    connectOrCreate?: formatsCreateOrConnectWithoutBookInput
    connect?: formatsWhereUniqueInput
  }

  export type languagesCreateNestedOneWithoutBookInput = {
    create?: XOR<languagesCreateWithoutBookInput, languagesUncheckedCreateWithoutBookInput>
    connectOrCreate?: languagesCreateOrConnectWithoutBookInput
    connect?: languagesWhereUniqueInput
  }

  export type publishersCreateNestedOneWithoutBookInput = {
    create?: XOR<publishersCreateWithoutBookInput, publishersUncheckedCreateWithoutBookInput>
    connectOrCreate?: publishersCreateOrConnectWithoutBookInput
    connect?: publishersWhereUniqueInput
  }

  export type book_authorsCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<book_authorsCreateWithoutBookInput>, Enumerable<book_authorsUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<book_authorsCreateOrConnectWithoutBookInput>
    createMany?: book_authorsCreateManyBookInputEnvelope
    connect?: Enumerable<book_authorsWhereUniqueInput>
  }

  export type book_categoriesCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<book_categoriesCreateWithoutBookInput>, Enumerable<book_categoriesUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<book_categoriesCreateOrConnectWithoutBookInput>
    createMany?: book_categoriesCreateManyBookInputEnvelope
    connect?: Enumerable<book_categoriesWhereUniqueInput>
  }

  export type coversCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<coversCreateWithoutBookInput>, Enumerable<coversUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<coversCreateOrConnectWithoutBookInput>
    createMany?: coversCreateManyBookInputEnvelope
    connect?: Enumerable<coversWhereUniqueInput>
  }

  export type book_authorsUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<book_authorsCreateWithoutBookInput>, Enumerable<book_authorsUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<book_authorsCreateOrConnectWithoutBookInput>
    createMany?: book_authorsCreateManyBookInputEnvelope
    connect?: Enumerable<book_authorsWhereUniqueInput>
  }

  export type book_categoriesUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<book_categoriesCreateWithoutBookInput>, Enumerable<book_categoriesUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<book_categoriesCreateOrConnectWithoutBookInput>
    createMany?: book_categoriesCreateManyBookInputEnvelope
    connect?: Enumerable<book_categoriesWhereUniqueInput>
  }

  export type coversUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<coversCreateWithoutBookInput>, Enumerable<coversUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<coversCreateOrConnectWithoutBookInput>
    createMany?: coversCreateManyBookInputEnvelope
    connect?: Enumerable<coversWhereUniqueInput>
  }

  export type bindingsUpdateOneRequiredWithoutBookNestedInput = {
    create?: XOR<bindingsCreateWithoutBookInput, bindingsUncheckedCreateWithoutBookInput>
    connectOrCreate?: bindingsCreateOrConnectWithoutBookInput
    upsert?: bindingsUpsertWithoutBookInput
    connect?: bindingsWhereUniqueInput
    update?: XOR<bindingsUpdateWithoutBookInput, bindingsUncheckedUpdateWithoutBookInput>
  }

  export type formatsUpdateOneWithoutBookNestedInput = {
    create?: XOR<formatsCreateWithoutBookInput, formatsUncheckedCreateWithoutBookInput>
    connectOrCreate?: formatsCreateOrConnectWithoutBookInput
    upsert?: formatsUpsertWithoutBookInput
    disconnect?: boolean
    delete?: boolean
    connect?: formatsWhereUniqueInput
    update?: XOR<formatsUpdateWithoutBookInput, formatsUncheckedUpdateWithoutBookInput>
  }

  export type languagesUpdateOneRequiredWithoutBookNestedInput = {
    create?: XOR<languagesCreateWithoutBookInput, languagesUncheckedCreateWithoutBookInput>
    connectOrCreate?: languagesCreateOrConnectWithoutBookInput
    upsert?: languagesUpsertWithoutBookInput
    connect?: languagesWhereUniqueInput
    update?: XOR<languagesUpdateWithoutBookInput, languagesUncheckedUpdateWithoutBookInput>
  }

  export type publishersUpdateOneRequiredWithoutBookNestedInput = {
    create?: XOR<publishersCreateWithoutBookInput, publishersUncheckedCreateWithoutBookInput>
    connectOrCreate?: publishersCreateOrConnectWithoutBookInput
    upsert?: publishersUpsertWithoutBookInput
    connect?: publishersWhereUniqueInput
    update?: XOR<publishersUpdateWithoutBookInput, publishersUncheckedUpdateWithoutBookInput>
  }

  export type book_authorsUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<book_authorsCreateWithoutBookInput>, Enumerable<book_authorsUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<book_authorsCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<book_authorsUpsertWithWhereUniqueWithoutBookInput>
    createMany?: book_authorsCreateManyBookInputEnvelope
    set?: Enumerable<book_authorsWhereUniqueInput>
    disconnect?: Enumerable<book_authorsWhereUniqueInput>
    delete?: Enumerable<book_authorsWhereUniqueInput>
    connect?: Enumerable<book_authorsWhereUniqueInput>
    update?: Enumerable<book_authorsUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<book_authorsUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<book_authorsScalarWhereInput>
  }

  export type book_categoriesUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<book_categoriesCreateWithoutBookInput>, Enumerable<book_categoriesUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<book_categoriesCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<book_categoriesUpsertWithWhereUniqueWithoutBookInput>
    createMany?: book_categoriesCreateManyBookInputEnvelope
    set?: Enumerable<book_categoriesWhereUniqueInput>
    disconnect?: Enumerable<book_categoriesWhereUniqueInput>
    delete?: Enumerable<book_categoriesWhereUniqueInput>
    connect?: Enumerable<book_categoriesWhereUniqueInput>
    update?: Enumerable<book_categoriesUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<book_categoriesUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<book_categoriesScalarWhereInput>
  }

  export type coversUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<coversCreateWithoutBookInput>, Enumerable<coversUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<coversCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<coversUpsertWithWhereUniqueWithoutBookInput>
    createMany?: coversCreateManyBookInputEnvelope
    set?: Enumerable<coversWhereUniqueInput>
    disconnect?: Enumerable<coversWhereUniqueInput>
    delete?: Enumerable<coversWhereUniqueInput>
    connect?: Enumerable<coversWhereUniqueInput>
    update?: Enumerable<coversUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<coversUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<coversScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type book_authorsUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<book_authorsCreateWithoutBookInput>, Enumerable<book_authorsUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<book_authorsCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<book_authorsUpsertWithWhereUniqueWithoutBookInput>
    createMany?: book_authorsCreateManyBookInputEnvelope
    set?: Enumerable<book_authorsWhereUniqueInput>
    disconnect?: Enumerable<book_authorsWhereUniqueInput>
    delete?: Enumerable<book_authorsWhereUniqueInput>
    connect?: Enumerable<book_authorsWhereUniqueInput>
    update?: Enumerable<book_authorsUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<book_authorsUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<book_authorsScalarWhereInput>
  }

  export type book_categoriesUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<book_categoriesCreateWithoutBookInput>, Enumerable<book_categoriesUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<book_categoriesCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<book_categoriesUpsertWithWhereUniqueWithoutBookInput>
    createMany?: book_categoriesCreateManyBookInputEnvelope
    set?: Enumerable<book_categoriesWhereUniqueInput>
    disconnect?: Enumerable<book_categoriesWhereUniqueInput>
    delete?: Enumerable<book_categoriesWhereUniqueInput>
    connect?: Enumerable<book_categoriesWhereUniqueInput>
    update?: Enumerable<book_categoriesUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<book_categoriesUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<book_categoriesScalarWhereInput>
  }

  export type coversUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<coversCreateWithoutBookInput>, Enumerable<coversUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<coversCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<coversUpsertWithWhereUniqueWithoutBookInput>
    createMany?: coversCreateManyBookInputEnvelope
    set?: Enumerable<coversWhereUniqueInput>
    disconnect?: Enumerable<coversWhereUniqueInput>
    delete?: Enumerable<coversWhereUniqueInput>
    connect?: Enumerable<coversWhereUniqueInput>
    update?: Enumerable<coversUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<coversUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<coversScalarWhereInput>
  }

  export type booksCreateNestedOneWithoutBook_categoriesInput = {
    create?: XOR<booksCreateWithoutBook_categoriesInput, booksUncheckedCreateWithoutBook_categoriesInput>
    connectOrCreate?: booksCreateOrConnectWithoutBook_categoriesInput
    connect?: booksWhereUniqueInput
  }

  export type categoriesCreateNestedOneWithoutBook_categoriesInput = {
    create?: XOR<categoriesCreateWithoutBook_categoriesInput, categoriesUncheckedCreateWithoutBook_categoriesInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutBook_categoriesInput
    connect?: categoriesWhereUniqueInput
  }

  export type booksUpdateOneRequiredWithoutBook_categoriesNestedInput = {
    create?: XOR<booksCreateWithoutBook_categoriesInput, booksUncheckedCreateWithoutBook_categoriesInput>
    connectOrCreate?: booksCreateOrConnectWithoutBook_categoriesInput
    upsert?: booksUpsertWithoutBook_categoriesInput
    connect?: booksWhereUniqueInput
    update?: XOR<booksUpdateWithoutBook_categoriesInput, booksUncheckedUpdateWithoutBook_categoriesInput>
  }

  export type categoriesUpdateOneRequiredWithoutBook_categoriesNestedInput = {
    create?: XOR<categoriesCreateWithoutBook_categoriesInput, categoriesUncheckedCreateWithoutBook_categoriesInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutBook_categoriesInput
    upsert?: categoriesUpsertWithoutBook_categoriesInput
    connect?: categoriesWhereUniqueInput
    update?: XOR<categoriesUpdateWithoutBook_categoriesInput, categoriesUncheckedUpdateWithoutBook_categoriesInput>
  }

  export type booksCreateNestedOneWithoutBook_authorsInput = {
    create?: XOR<booksCreateWithoutBook_authorsInput, booksUncheckedCreateWithoutBook_authorsInput>
    connectOrCreate?: booksCreateOrConnectWithoutBook_authorsInput
    connect?: booksWhereUniqueInput
  }

  export type authorsCreateNestedOneWithoutBook_authorsInput = {
    create?: XOR<authorsCreateWithoutBook_authorsInput, authorsUncheckedCreateWithoutBook_authorsInput>
    connectOrCreate?: authorsCreateOrConnectWithoutBook_authorsInput
    connect?: authorsWhereUniqueInput
  }

  export type booksUpdateOneRequiredWithoutBook_authorsNestedInput = {
    create?: XOR<booksCreateWithoutBook_authorsInput, booksUncheckedCreateWithoutBook_authorsInput>
    connectOrCreate?: booksCreateOrConnectWithoutBook_authorsInput
    upsert?: booksUpsertWithoutBook_authorsInput
    connect?: booksWhereUniqueInput
    update?: XOR<booksUpdateWithoutBook_authorsInput, booksUncheckedUpdateWithoutBook_authorsInput>
  }

  export type authorsUpdateOneRequiredWithoutBook_authorsNestedInput = {
    create?: XOR<authorsCreateWithoutBook_authorsInput, authorsUncheckedCreateWithoutBook_authorsInput>
    connectOrCreate?: authorsCreateOrConnectWithoutBook_authorsInput
    upsert?: authorsUpsertWithoutBook_authorsInput
    connect?: authorsWhereUniqueInput
    update?: XOR<authorsUpdateWithoutBook_authorsInput, authorsUncheckedUpdateWithoutBook_authorsInput>
  }

  export type booksCreateNestedOneWithoutCoversInput = {
    create?: XOR<booksCreateWithoutCoversInput, booksUncheckedCreateWithoutCoversInput>
    connectOrCreate?: booksCreateOrConnectWithoutCoversInput
    connect?: booksWhereUniqueInput
  }

  export type booksUpdateOneRequiredWithoutCoversNestedInput = {
    create?: XOR<booksCreateWithoutCoversInput, booksUncheckedCreateWithoutCoversInput>
    connectOrCreate?: booksCreateOrConnectWithoutCoversInput
    upsert?: booksUpsertWithoutCoversInput
    connect?: booksWhereUniqueInput
    update?: XOR<booksUpdateWithoutCoversInput, booksUncheckedUpdateWithoutCoversInput>
  }

  export type booksCreateNestedManyWithoutBindingsInput = {
    create?: XOR<Enumerable<booksCreateWithoutBindingsInput>, Enumerable<booksUncheckedCreateWithoutBindingsInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutBindingsInput>
    createMany?: booksCreateManyBindingsInputEnvelope
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type booksUncheckedCreateNestedManyWithoutBindingsInput = {
    create?: XOR<Enumerable<booksCreateWithoutBindingsInput>, Enumerable<booksUncheckedCreateWithoutBindingsInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutBindingsInput>
    createMany?: booksCreateManyBindingsInputEnvelope
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type booksUpdateManyWithoutBindingsNestedInput = {
    create?: XOR<Enumerable<booksCreateWithoutBindingsInput>, Enumerable<booksUncheckedCreateWithoutBindingsInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutBindingsInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutBindingsInput>
    createMany?: booksCreateManyBindingsInputEnvelope
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    connect?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutBindingsInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutBindingsInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type booksUncheckedUpdateManyWithoutBindingsNestedInput = {
    create?: XOR<Enumerable<booksCreateWithoutBindingsInput>, Enumerable<booksUncheckedCreateWithoutBindingsInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutBindingsInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutBindingsInput>
    createMany?: booksCreateManyBindingsInputEnvelope
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    connect?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutBindingsInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutBindingsInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type booksCreateNestedManyWithoutFormatsInput = {
    create?: XOR<Enumerable<booksCreateWithoutFormatsInput>, Enumerable<booksUncheckedCreateWithoutFormatsInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutFormatsInput>
    createMany?: booksCreateManyFormatsInputEnvelope
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type booksUncheckedCreateNestedManyWithoutFormatsInput = {
    create?: XOR<Enumerable<booksCreateWithoutFormatsInput>, Enumerable<booksUncheckedCreateWithoutFormatsInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutFormatsInput>
    createMany?: booksCreateManyFormatsInputEnvelope
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type booksUpdateManyWithoutFormatsNestedInput = {
    create?: XOR<Enumerable<booksCreateWithoutFormatsInput>, Enumerable<booksUncheckedCreateWithoutFormatsInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutFormatsInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutFormatsInput>
    createMany?: booksCreateManyFormatsInputEnvelope
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    connect?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutFormatsInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutFormatsInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type booksUncheckedUpdateManyWithoutFormatsNestedInput = {
    create?: XOR<Enumerable<booksCreateWithoutFormatsInput>, Enumerable<booksUncheckedCreateWithoutFormatsInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutFormatsInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutFormatsInput>
    createMany?: booksCreateManyFormatsInputEnvelope
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    connect?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutFormatsInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutFormatsInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type booksCreateNestedManyWithoutLanguagesInput = {
    create?: XOR<Enumerable<booksCreateWithoutLanguagesInput>, Enumerable<booksUncheckedCreateWithoutLanguagesInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutLanguagesInput>
    createMany?: booksCreateManyLanguagesInputEnvelope
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type booksUncheckedCreateNestedManyWithoutLanguagesInput = {
    create?: XOR<Enumerable<booksCreateWithoutLanguagesInput>, Enumerable<booksUncheckedCreateWithoutLanguagesInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutLanguagesInput>
    createMany?: booksCreateManyLanguagesInputEnvelope
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type booksUpdateManyWithoutLanguagesNestedInput = {
    create?: XOR<Enumerable<booksCreateWithoutLanguagesInput>, Enumerable<booksUncheckedCreateWithoutLanguagesInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutLanguagesInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutLanguagesInput>
    createMany?: booksCreateManyLanguagesInputEnvelope
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    connect?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutLanguagesInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutLanguagesInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type booksUncheckedUpdateManyWithoutLanguagesNestedInput = {
    create?: XOR<Enumerable<booksCreateWithoutLanguagesInput>, Enumerable<booksUncheckedCreateWithoutLanguagesInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutLanguagesInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutLanguagesInput>
    createMany?: booksCreateManyLanguagesInputEnvelope
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    connect?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutLanguagesInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutLanguagesInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type booksCreateNestedManyWithoutPublishersInput = {
    create?: XOR<Enumerable<booksCreateWithoutPublishersInput>, Enumerable<booksUncheckedCreateWithoutPublishersInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutPublishersInput>
    createMany?: booksCreateManyPublishersInputEnvelope
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type booksUncheckedCreateNestedManyWithoutPublishersInput = {
    create?: XOR<Enumerable<booksCreateWithoutPublishersInput>, Enumerable<booksUncheckedCreateWithoutPublishersInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutPublishersInput>
    createMany?: booksCreateManyPublishersInputEnvelope
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type booksUpdateManyWithoutPublishersNestedInput = {
    create?: XOR<Enumerable<booksCreateWithoutPublishersInput>, Enumerable<booksUncheckedCreateWithoutPublishersInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutPublishersInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutPublishersInput>
    createMany?: booksCreateManyPublishersInputEnvelope
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    connect?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutPublishersInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutPublishersInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type booksUncheckedUpdateManyWithoutPublishersNestedInput = {
    create?: XOR<Enumerable<booksCreateWithoutPublishersInput>, Enumerable<booksUncheckedCreateWithoutPublishersInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutPublishersInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutPublishersInput>
    createMany?: booksCreateManyPublishersInputEnvelope
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    connect?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutPublishersInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutPublishersInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type book_authorsCreateWithoutAuthorInput = {
    book: booksCreateNestedOneWithoutBook_authorsInput
  }

  export type book_authorsUncheckedCreateWithoutAuthorInput = {
    id?: number
    bookId: number
  }

  export type book_authorsCreateOrConnectWithoutAuthorInput = {
    where: book_authorsWhereUniqueInput
    create: XOR<book_authorsCreateWithoutAuthorInput, book_authorsUncheckedCreateWithoutAuthorInput>
  }

  export type book_authorsCreateManyAuthorInputEnvelope = {
    data: Enumerable<book_authorsCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type book_authorsUpsertWithWhereUniqueWithoutAuthorInput = {
    where: book_authorsWhereUniqueInput
    update: XOR<book_authorsUpdateWithoutAuthorInput, book_authorsUncheckedUpdateWithoutAuthorInput>
    create: XOR<book_authorsCreateWithoutAuthorInput, book_authorsUncheckedCreateWithoutAuthorInput>
  }

  export type book_authorsUpdateWithWhereUniqueWithoutAuthorInput = {
    where: book_authorsWhereUniqueInput
    data: XOR<book_authorsUpdateWithoutAuthorInput, book_authorsUncheckedUpdateWithoutAuthorInput>
  }

  export type book_authorsUpdateManyWithWhereWithoutAuthorInput = {
    where: book_authorsScalarWhereInput
    data: XOR<book_authorsUpdateManyMutationInput, book_authorsUncheckedUpdateManyWithoutBook_authorsInput>
  }

  export type book_authorsScalarWhereInput = {
    AND?: Enumerable<book_authorsScalarWhereInput>
    OR?: Enumerable<book_authorsScalarWhereInput>
    NOT?: Enumerable<book_authorsScalarWhereInput>
    id?: IntFilter | number
    bookId?: IntFilter | number
    authorId?: IntFilter | number
  }

  export type book_categoriesCreateWithoutCategorieInput = {
    book: booksCreateNestedOneWithoutBook_categoriesInput
  }

  export type book_categoriesUncheckedCreateWithoutCategorieInput = {
    id?: number
    bookId: number
  }

  export type book_categoriesCreateOrConnectWithoutCategorieInput = {
    where: book_categoriesWhereUniqueInput
    create: XOR<book_categoriesCreateWithoutCategorieInput, book_categoriesUncheckedCreateWithoutCategorieInput>
  }

  export type book_categoriesCreateManyCategorieInputEnvelope = {
    data: Enumerable<book_categoriesCreateManyCategorieInput>
    skipDuplicates?: boolean
  }

  export type book_categoriesUpsertWithWhereUniqueWithoutCategorieInput = {
    where: book_categoriesWhereUniqueInput
    update: XOR<book_categoriesUpdateWithoutCategorieInput, book_categoriesUncheckedUpdateWithoutCategorieInput>
    create: XOR<book_categoriesCreateWithoutCategorieInput, book_categoriesUncheckedCreateWithoutCategorieInput>
  }

  export type book_categoriesUpdateWithWhereUniqueWithoutCategorieInput = {
    where: book_categoriesWhereUniqueInput
    data: XOR<book_categoriesUpdateWithoutCategorieInput, book_categoriesUncheckedUpdateWithoutCategorieInput>
  }

  export type book_categoriesUpdateManyWithWhereWithoutCategorieInput = {
    where: book_categoriesScalarWhereInput
    data: XOR<book_categoriesUpdateManyMutationInput, book_categoriesUncheckedUpdateManyWithoutBook_categoriesInput>
  }

  export type book_categoriesScalarWhereInput = {
    AND?: Enumerable<book_categoriesScalarWhereInput>
    OR?: Enumerable<book_categoriesScalarWhereInput>
    NOT?: Enumerable<book_categoriesScalarWhereInput>
    id?: IntFilter | number
    bookId?: IntFilter | number
    cathegorieId?: IntFilter | number
  }

  export type bindingsCreateWithoutBookInput = {
    name: string
  }

  export type bindingsUncheckedCreateWithoutBookInput = {
    id?: number
    name: string
  }

  export type bindingsCreateOrConnectWithoutBookInput = {
    where: bindingsWhereUniqueInput
    create: XOR<bindingsCreateWithoutBookInput, bindingsUncheckedCreateWithoutBookInput>
  }

  export type formatsCreateWithoutBookInput = {
    name: string
  }

  export type formatsUncheckedCreateWithoutBookInput = {
    id?: number
    name: string
  }

  export type formatsCreateOrConnectWithoutBookInput = {
    where: formatsWhereUniqueInput
    create: XOR<formatsCreateWithoutBookInput, formatsUncheckedCreateWithoutBookInput>
  }

  export type languagesCreateWithoutBookInput = {
    name: string
  }

  export type languagesUncheckedCreateWithoutBookInput = {
    id?: number
    name: string
  }

  export type languagesCreateOrConnectWithoutBookInput = {
    where: languagesWhereUniqueInput
    create: XOR<languagesCreateWithoutBookInput, languagesUncheckedCreateWithoutBookInput>
  }

  export type publishersCreateWithoutBookInput = {
    name: string
  }

  export type publishersUncheckedCreateWithoutBookInput = {
    id?: number
    name: string
  }

  export type publishersCreateOrConnectWithoutBookInput = {
    where: publishersWhereUniqueInput
    create: XOR<publishersCreateWithoutBookInput, publishersUncheckedCreateWithoutBookInput>
  }

  export type book_authorsCreateWithoutBookInput = {
    author: authorsCreateNestedOneWithoutBook_authorsInput
  }

  export type book_authorsUncheckedCreateWithoutBookInput = {
    id?: number
    authorId: number
  }

  export type book_authorsCreateOrConnectWithoutBookInput = {
    where: book_authorsWhereUniqueInput
    create: XOR<book_authorsCreateWithoutBookInput, book_authorsUncheckedCreateWithoutBookInput>
  }

  export type book_authorsCreateManyBookInputEnvelope = {
    data: Enumerable<book_authorsCreateManyBookInput>
    skipDuplicates?: boolean
  }

  export type book_categoriesCreateWithoutBookInput = {
    categorie: categoriesCreateNestedOneWithoutBook_categoriesInput
  }

  export type book_categoriesUncheckedCreateWithoutBookInput = {
    id?: number
    cathegorieId: number
  }

  export type book_categoriesCreateOrConnectWithoutBookInput = {
    where: book_categoriesWhereUniqueInput
    create: XOR<book_categoriesCreateWithoutBookInput, book_categoriesUncheckedCreateWithoutBookInput>
  }

  export type book_categoriesCreateManyBookInputEnvelope = {
    data: Enumerable<book_categoriesCreateManyBookInput>
    skipDuplicates?: boolean
  }

  export type coversCreateWithoutBookInput = {
    url: string
  }

  export type coversUncheckedCreateWithoutBookInput = {
    id?: number
    url: string
  }

  export type coversCreateOrConnectWithoutBookInput = {
    where: coversWhereUniqueInput
    create: XOR<coversCreateWithoutBookInput, coversUncheckedCreateWithoutBookInput>
  }

  export type coversCreateManyBookInputEnvelope = {
    data: Enumerable<coversCreateManyBookInput>
    skipDuplicates?: boolean
  }

  export type bindingsUpsertWithoutBookInput = {
    update: XOR<bindingsUpdateWithoutBookInput, bindingsUncheckedUpdateWithoutBookInput>
    create: XOR<bindingsCreateWithoutBookInput, bindingsUncheckedCreateWithoutBookInput>
  }

  export type bindingsUpdateWithoutBookInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type bindingsUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type formatsUpsertWithoutBookInput = {
    update: XOR<formatsUpdateWithoutBookInput, formatsUncheckedUpdateWithoutBookInput>
    create: XOR<formatsCreateWithoutBookInput, formatsUncheckedCreateWithoutBookInput>
  }

  export type formatsUpdateWithoutBookInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type formatsUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type languagesUpsertWithoutBookInput = {
    update: XOR<languagesUpdateWithoutBookInput, languagesUncheckedUpdateWithoutBookInput>
    create: XOR<languagesCreateWithoutBookInput, languagesUncheckedCreateWithoutBookInput>
  }

  export type languagesUpdateWithoutBookInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type languagesUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type publishersUpsertWithoutBookInput = {
    update: XOR<publishersUpdateWithoutBookInput, publishersUncheckedUpdateWithoutBookInput>
    create: XOR<publishersCreateWithoutBookInput, publishersUncheckedCreateWithoutBookInput>
  }

  export type publishersUpdateWithoutBookInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type publishersUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type book_authorsUpsertWithWhereUniqueWithoutBookInput = {
    where: book_authorsWhereUniqueInput
    update: XOR<book_authorsUpdateWithoutBookInput, book_authorsUncheckedUpdateWithoutBookInput>
    create: XOR<book_authorsCreateWithoutBookInput, book_authorsUncheckedCreateWithoutBookInput>
  }

  export type book_authorsUpdateWithWhereUniqueWithoutBookInput = {
    where: book_authorsWhereUniqueInput
    data: XOR<book_authorsUpdateWithoutBookInput, book_authorsUncheckedUpdateWithoutBookInput>
  }

  export type book_authorsUpdateManyWithWhereWithoutBookInput = {
    where: book_authorsScalarWhereInput
    data: XOR<book_authorsUpdateManyMutationInput, book_authorsUncheckedUpdateManyWithoutBook_authorsInput>
  }

  export type book_categoriesUpsertWithWhereUniqueWithoutBookInput = {
    where: book_categoriesWhereUniqueInput
    update: XOR<book_categoriesUpdateWithoutBookInput, book_categoriesUncheckedUpdateWithoutBookInput>
    create: XOR<book_categoriesCreateWithoutBookInput, book_categoriesUncheckedCreateWithoutBookInput>
  }

  export type book_categoriesUpdateWithWhereUniqueWithoutBookInput = {
    where: book_categoriesWhereUniqueInput
    data: XOR<book_categoriesUpdateWithoutBookInput, book_categoriesUncheckedUpdateWithoutBookInput>
  }

  export type book_categoriesUpdateManyWithWhereWithoutBookInput = {
    where: book_categoriesScalarWhereInput
    data: XOR<book_categoriesUpdateManyMutationInput, book_categoriesUncheckedUpdateManyWithoutBook_categoriesInput>
  }

  export type coversUpsertWithWhereUniqueWithoutBookInput = {
    where: coversWhereUniqueInput
    update: XOR<coversUpdateWithoutBookInput, coversUncheckedUpdateWithoutBookInput>
    create: XOR<coversCreateWithoutBookInput, coversUncheckedCreateWithoutBookInput>
  }

  export type coversUpdateWithWhereUniqueWithoutBookInput = {
    where: coversWhereUniqueInput
    data: XOR<coversUpdateWithoutBookInput, coversUncheckedUpdateWithoutBookInput>
  }

  export type coversUpdateManyWithWhereWithoutBookInput = {
    where: coversScalarWhereInput
    data: XOR<coversUpdateManyMutationInput, coversUncheckedUpdateManyWithoutCoversInput>
  }

  export type coversScalarWhereInput = {
    AND?: Enumerable<coversScalarWhereInput>
    OR?: Enumerable<coversScalarWhereInput>
    NOT?: Enumerable<coversScalarWhereInput>
    id?: IntFilter | number
    url?: StringFilter | string
    booksId?: IntFilter | number
  }

  export type booksCreateWithoutBook_categoriesInput = {
    title: string
    summary: string
    year: string
    bindings: bindingsCreateNestedOneWithoutBookInput
    formats?: formatsCreateNestedOneWithoutBookInput
    languages: languagesCreateNestedOneWithoutBookInput
    publishers: publishersCreateNestedOneWithoutBookInput
    book_authors?: book_authorsCreateNestedManyWithoutBookInput
    covers?: coversCreateNestedManyWithoutBookInput
  }

  export type booksUncheckedCreateWithoutBook_categoriesInput = {
    id?: number
    title: string
    summary: string
    year: string
    bindingId: number
    formatId?: number | null
    languageId: number
    publisherId: number
    book_authors?: book_authorsUncheckedCreateNestedManyWithoutBookInput
    covers?: coversUncheckedCreateNestedManyWithoutBookInput
  }

  export type booksCreateOrConnectWithoutBook_categoriesInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutBook_categoriesInput, booksUncheckedCreateWithoutBook_categoriesInput>
  }

  export type categoriesCreateWithoutBook_categoriesInput = {
    name: string
  }

  export type categoriesUncheckedCreateWithoutBook_categoriesInput = {
    id?: number
    name: string
  }

  export type categoriesCreateOrConnectWithoutBook_categoriesInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutBook_categoriesInput, categoriesUncheckedCreateWithoutBook_categoriesInput>
  }

  export type booksUpsertWithoutBook_categoriesInput = {
    update: XOR<booksUpdateWithoutBook_categoriesInput, booksUncheckedUpdateWithoutBook_categoriesInput>
    create: XOR<booksCreateWithoutBook_categoriesInput, booksUncheckedCreateWithoutBook_categoriesInput>
  }

  export type booksUpdateWithoutBook_categoriesInput = {
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindings?: bindingsUpdateOneRequiredWithoutBookNestedInput
    formats?: formatsUpdateOneWithoutBookNestedInput
    languages?: languagesUpdateOneRequiredWithoutBookNestedInput
    publishers?: publishersUpdateOneRequiredWithoutBookNestedInput
    book_authors?: book_authorsUpdateManyWithoutBookNestedInput
    covers?: coversUpdateManyWithoutBookNestedInput
  }

  export type booksUncheckedUpdateWithoutBook_categoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindingId?: IntFieldUpdateOperationsInput | number
    formatId?: NullableIntFieldUpdateOperationsInput | number | null
    languageId?: IntFieldUpdateOperationsInput | number
    publisherId?: IntFieldUpdateOperationsInput | number
    book_authors?: book_authorsUncheckedUpdateManyWithoutBookNestedInput
    covers?: coversUncheckedUpdateManyWithoutBookNestedInput
  }

  export type categoriesUpsertWithoutBook_categoriesInput = {
    update: XOR<categoriesUpdateWithoutBook_categoriesInput, categoriesUncheckedUpdateWithoutBook_categoriesInput>
    create: XOR<categoriesCreateWithoutBook_categoriesInput, categoriesUncheckedCreateWithoutBook_categoriesInput>
  }

  export type categoriesUpdateWithoutBook_categoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesUncheckedUpdateWithoutBook_categoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type booksCreateWithoutBook_authorsInput = {
    title: string
    summary: string
    year: string
    bindings: bindingsCreateNestedOneWithoutBookInput
    formats?: formatsCreateNestedOneWithoutBookInput
    languages: languagesCreateNestedOneWithoutBookInput
    publishers: publishersCreateNestedOneWithoutBookInput
    book_categories?: book_categoriesCreateNestedManyWithoutBookInput
    covers?: coversCreateNestedManyWithoutBookInput
  }

  export type booksUncheckedCreateWithoutBook_authorsInput = {
    id?: number
    title: string
    summary: string
    year: string
    bindingId: number
    formatId?: number | null
    languageId: number
    publisherId: number
    book_categories?: book_categoriesUncheckedCreateNestedManyWithoutBookInput
    covers?: coversUncheckedCreateNestedManyWithoutBookInput
  }

  export type booksCreateOrConnectWithoutBook_authorsInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutBook_authorsInput, booksUncheckedCreateWithoutBook_authorsInput>
  }

  export type authorsCreateWithoutBook_authorsInput = {
    name: string
  }

  export type authorsUncheckedCreateWithoutBook_authorsInput = {
    id?: number
    name: string
  }

  export type authorsCreateOrConnectWithoutBook_authorsInput = {
    where: authorsWhereUniqueInput
    create: XOR<authorsCreateWithoutBook_authorsInput, authorsUncheckedCreateWithoutBook_authorsInput>
  }

  export type booksUpsertWithoutBook_authorsInput = {
    update: XOR<booksUpdateWithoutBook_authorsInput, booksUncheckedUpdateWithoutBook_authorsInput>
    create: XOR<booksCreateWithoutBook_authorsInput, booksUncheckedCreateWithoutBook_authorsInput>
  }

  export type booksUpdateWithoutBook_authorsInput = {
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindings?: bindingsUpdateOneRequiredWithoutBookNestedInput
    formats?: formatsUpdateOneWithoutBookNestedInput
    languages?: languagesUpdateOneRequiredWithoutBookNestedInput
    publishers?: publishersUpdateOneRequiredWithoutBookNestedInput
    book_categories?: book_categoriesUpdateManyWithoutBookNestedInput
    covers?: coversUpdateManyWithoutBookNestedInput
  }

  export type booksUncheckedUpdateWithoutBook_authorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindingId?: IntFieldUpdateOperationsInput | number
    formatId?: NullableIntFieldUpdateOperationsInput | number | null
    languageId?: IntFieldUpdateOperationsInput | number
    publisherId?: IntFieldUpdateOperationsInput | number
    book_categories?: book_categoriesUncheckedUpdateManyWithoutBookNestedInput
    covers?: coversUncheckedUpdateManyWithoutBookNestedInput
  }

  export type authorsUpsertWithoutBook_authorsInput = {
    update: XOR<authorsUpdateWithoutBook_authorsInput, authorsUncheckedUpdateWithoutBook_authorsInput>
    create: XOR<authorsCreateWithoutBook_authorsInput, authorsUncheckedCreateWithoutBook_authorsInput>
  }

  export type authorsUpdateWithoutBook_authorsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type authorsUncheckedUpdateWithoutBook_authorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type booksCreateWithoutCoversInput = {
    title: string
    summary: string
    year: string
    bindings: bindingsCreateNestedOneWithoutBookInput
    formats?: formatsCreateNestedOneWithoutBookInput
    languages: languagesCreateNestedOneWithoutBookInput
    publishers: publishersCreateNestedOneWithoutBookInput
    book_authors?: book_authorsCreateNestedManyWithoutBookInput
    book_categories?: book_categoriesCreateNestedManyWithoutBookInput
  }

  export type booksUncheckedCreateWithoutCoversInput = {
    id?: number
    title: string
    summary: string
    year: string
    bindingId: number
    formatId?: number | null
    languageId: number
    publisherId: number
    book_authors?: book_authorsUncheckedCreateNestedManyWithoutBookInput
    book_categories?: book_categoriesUncheckedCreateNestedManyWithoutBookInput
  }

  export type booksCreateOrConnectWithoutCoversInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutCoversInput, booksUncheckedCreateWithoutCoversInput>
  }

  export type booksUpsertWithoutCoversInput = {
    update: XOR<booksUpdateWithoutCoversInput, booksUncheckedUpdateWithoutCoversInput>
    create: XOR<booksCreateWithoutCoversInput, booksUncheckedCreateWithoutCoversInput>
  }

  export type booksUpdateWithoutCoversInput = {
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindings?: bindingsUpdateOneRequiredWithoutBookNestedInput
    formats?: formatsUpdateOneWithoutBookNestedInput
    languages?: languagesUpdateOneRequiredWithoutBookNestedInput
    publishers?: publishersUpdateOneRequiredWithoutBookNestedInput
    book_authors?: book_authorsUpdateManyWithoutBookNestedInput
    book_categories?: book_categoriesUpdateManyWithoutBookNestedInput
  }

  export type booksUncheckedUpdateWithoutCoversInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindingId?: IntFieldUpdateOperationsInput | number
    formatId?: NullableIntFieldUpdateOperationsInput | number | null
    languageId?: IntFieldUpdateOperationsInput | number
    publisherId?: IntFieldUpdateOperationsInput | number
    book_authors?: book_authorsUncheckedUpdateManyWithoutBookNestedInput
    book_categories?: book_categoriesUncheckedUpdateManyWithoutBookNestedInput
  }

  export type booksCreateWithoutBindingsInput = {
    title: string
    summary: string
    year: string
    formats?: formatsCreateNestedOneWithoutBookInput
    languages: languagesCreateNestedOneWithoutBookInput
    publishers: publishersCreateNestedOneWithoutBookInput
    book_authors?: book_authorsCreateNestedManyWithoutBookInput
    book_categories?: book_categoriesCreateNestedManyWithoutBookInput
    covers?: coversCreateNestedManyWithoutBookInput
  }

  export type booksUncheckedCreateWithoutBindingsInput = {
    id?: number
    title: string
    summary: string
    year: string
    formatId?: number | null
    languageId: number
    publisherId: number
    book_authors?: book_authorsUncheckedCreateNestedManyWithoutBookInput
    book_categories?: book_categoriesUncheckedCreateNestedManyWithoutBookInput
    covers?: coversUncheckedCreateNestedManyWithoutBookInput
  }

  export type booksCreateOrConnectWithoutBindingsInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutBindingsInput, booksUncheckedCreateWithoutBindingsInput>
  }

  export type booksCreateManyBindingsInputEnvelope = {
    data: Enumerable<booksCreateManyBindingsInput>
    skipDuplicates?: boolean
  }

  export type booksUpsertWithWhereUniqueWithoutBindingsInput = {
    where: booksWhereUniqueInput
    update: XOR<booksUpdateWithoutBindingsInput, booksUncheckedUpdateWithoutBindingsInput>
    create: XOR<booksCreateWithoutBindingsInput, booksUncheckedCreateWithoutBindingsInput>
  }

  export type booksUpdateWithWhereUniqueWithoutBindingsInput = {
    where: booksWhereUniqueInput
    data: XOR<booksUpdateWithoutBindingsInput, booksUncheckedUpdateWithoutBindingsInput>
  }

  export type booksUpdateManyWithWhereWithoutBindingsInput = {
    where: booksScalarWhereInput
    data: XOR<booksUpdateManyMutationInput, booksUncheckedUpdateManyWithoutBookInput>
  }

  export type booksScalarWhereInput = {
    AND?: Enumerable<booksScalarWhereInput>
    OR?: Enumerable<booksScalarWhereInput>
    NOT?: Enumerable<booksScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    summary?: StringFilter | string
    year?: StringFilter | string
    bindingId?: IntFilter | number
    formatId?: IntNullableFilter | number | null
    languageId?: IntFilter | number
    publisherId?: IntFilter | number
  }

  export type booksCreateWithoutFormatsInput = {
    title: string
    summary: string
    year: string
    bindings: bindingsCreateNestedOneWithoutBookInput
    languages: languagesCreateNestedOneWithoutBookInput
    publishers: publishersCreateNestedOneWithoutBookInput
    book_authors?: book_authorsCreateNestedManyWithoutBookInput
    book_categories?: book_categoriesCreateNestedManyWithoutBookInput
    covers?: coversCreateNestedManyWithoutBookInput
  }

  export type booksUncheckedCreateWithoutFormatsInput = {
    id?: number
    title: string
    summary: string
    year: string
    bindingId: number
    languageId: number
    publisherId: number
    book_authors?: book_authorsUncheckedCreateNestedManyWithoutBookInput
    book_categories?: book_categoriesUncheckedCreateNestedManyWithoutBookInput
    covers?: coversUncheckedCreateNestedManyWithoutBookInput
  }

  export type booksCreateOrConnectWithoutFormatsInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutFormatsInput, booksUncheckedCreateWithoutFormatsInput>
  }

  export type booksCreateManyFormatsInputEnvelope = {
    data: Enumerable<booksCreateManyFormatsInput>
    skipDuplicates?: boolean
  }

  export type booksUpsertWithWhereUniqueWithoutFormatsInput = {
    where: booksWhereUniqueInput
    update: XOR<booksUpdateWithoutFormatsInput, booksUncheckedUpdateWithoutFormatsInput>
    create: XOR<booksCreateWithoutFormatsInput, booksUncheckedCreateWithoutFormatsInput>
  }

  export type booksUpdateWithWhereUniqueWithoutFormatsInput = {
    where: booksWhereUniqueInput
    data: XOR<booksUpdateWithoutFormatsInput, booksUncheckedUpdateWithoutFormatsInput>
  }

  export type booksUpdateManyWithWhereWithoutFormatsInput = {
    where: booksScalarWhereInput
    data: XOR<booksUpdateManyMutationInput, booksUncheckedUpdateManyWithoutBookInput>
  }

  export type booksCreateWithoutLanguagesInput = {
    title: string
    summary: string
    year: string
    bindings: bindingsCreateNestedOneWithoutBookInput
    formats?: formatsCreateNestedOneWithoutBookInput
    publishers: publishersCreateNestedOneWithoutBookInput
    book_authors?: book_authorsCreateNestedManyWithoutBookInput
    book_categories?: book_categoriesCreateNestedManyWithoutBookInput
    covers?: coversCreateNestedManyWithoutBookInput
  }

  export type booksUncheckedCreateWithoutLanguagesInput = {
    id?: number
    title: string
    summary: string
    year: string
    bindingId: number
    formatId?: number | null
    publisherId: number
    book_authors?: book_authorsUncheckedCreateNestedManyWithoutBookInput
    book_categories?: book_categoriesUncheckedCreateNestedManyWithoutBookInput
    covers?: coversUncheckedCreateNestedManyWithoutBookInput
  }

  export type booksCreateOrConnectWithoutLanguagesInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutLanguagesInput, booksUncheckedCreateWithoutLanguagesInput>
  }

  export type booksCreateManyLanguagesInputEnvelope = {
    data: Enumerable<booksCreateManyLanguagesInput>
    skipDuplicates?: boolean
  }

  export type booksUpsertWithWhereUniqueWithoutLanguagesInput = {
    where: booksWhereUniqueInput
    update: XOR<booksUpdateWithoutLanguagesInput, booksUncheckedUpdateWithoutLanguagesInput>
    create: XOR<booksCreateWithoutLanguagesInput, booksUncheckedCreateWithoutLanguagesInput>
  }

  export type booksUpdateWithWhereUniqueWithoutLanguagesInput = {
    where: booksWhereUniqueInput
    data: XOR<booksUpdateWithoutLanguagesInput, booksUncheckedUpdateWithoutLanguagesInput>
  }

  export type booksUpdateManyWithWhereWithoutLanguagesInput = {
    where: booksScalarWhereInput
    data: XOR<booksUpdateManyMutationInput, booksUncheckedUpdateManyWithoutBookInput>
  }

  export type booksCreateWithoutPublishersInput = {
    title: string
    summary: string
    year: string
    bindings: bindingsCreateNestedOneWithoutBookInput
    formats?: formatsCreateNestedOneWithoutBookInput
    languages: languagesCreateNestedOneWithoutBookInput
    book_authors?: book_authorsCreateNestedManyWithoutBookInput
    book_categories?: book_categoriesCreateNestedManyWithoutBookInput
    covers?: coversCreateNestedManyWithoutBookInput
  }

  export type booksUncheckedCreateWithoutPublishersInput = {
    id?: number
    title: string
    summary: string
    year: string
    bindingId: number
    formatId?: number | null
    languageId: number
    book_authors?: book_authorsUncheckedCreateNestedManyWithoutBookInput
    book_categories?: book_categoriesUncheckedCreateNestedManyWithoutBookInput
    covers?: coversUncheckedCreateNestedManyWithoutBookInput
  }

  export type booksCreateOrConnectWithoutPublishersInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutPublishersInput, booksUncheckedCreateWithoutPublishersInput>
  }

  export type booksCreateManyPublishersInputEnvelope = {
    data: Enumerable<booksCreateManyPublishersInput>
    skipDuplicates?: boolean
  }

  export type booksUpsertWithWhereUniqueWithoutPublishersInput = {
    where: booksWhereUniqueInput
    update: XOR<booksUpdateWithoutPublishersInput, booksUncheckedUpdateWithoutPublishersInput>
    create: XOR<booksCreateWithoutPublishersInput, booksUncheckedCreateWithoutPublishersInput>
  }

  export type booksUpdateWithWhereUniqueWithoutPublishersInput = {
    where: booksWhereUniqueInput
    data: XOR<booksUpdateWithoutPublishersInput, booksUncheckedUpdateWithoutPublishersInput>
  }

  export type booksUpdateManyWithWhereWithoutPublishersInput = {
    where: booksScalarWhereInput
    data: XOR<booksUpdateManyMutationInput, booksUncheckedUpdateManyWithoutBookInput>
  }

  export type book_authorsCreateManyAuthorInput = {
    id?: number
    bookId: number
  }

  export type book_authorsUpdateWithoutAuthorInput = {
    book?: booksUpdateOneRequiredWithoutBook_authorsNestedInput
  }

  export type book_authorsUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type book_authorsUncheckedUpdateManyWithoutBook_authorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type book_categoriesCreateManyCategorieInput = {
    id?: number
    bookId: number
  }

  export type book_categoriesUpdateWithoutCategorieInput = {
    book?: booksUpdateOneRequiredWithoutBook_categoriesNestedInput
  }

  export type book_categoriesUncheckedUpdateWithoutCategorieInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type book_categoriesUncheckedUpdateManyWithoutBook_categoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
  }

  export type book_authorsCreateManyBookInput = {
    id?: number
    authorId: number
  }

  export type book_categoriesCreateManyBookInput = {
    id?: number
    cathegorieId: number
  }

  export type coversCreateManyBookInput = {
    id?: number
    url: string
  }

  export type book_authorsUpdateWithoutBookInput = {
    author?: authorsUpdateOneRequiredWithoutBook_authorsNestedInput
  }

  export type book_authorsUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
  }

  export type book_categoriesUpdateWithoutBookInput = {
    categorie?: categoriesUpdateOneRequiredWithoutBook_categoriesNestedInput
  }

  export type book_categoriesUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    cathegorieId?: IntFieldUpdateOperationsInput | number
  }

  export type coversUpdateWithoutBookInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type coversUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type coversUncheckedUpdateManyWithoutCoversInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type booksCreateManyBindingsInput = {
    id?: number
    title: string
    summary: string
    year: string
    formatId?: number | null
    languageId: number
    publisherId: number
  }

  export type booksUpdateWithoutBindingsInput = {
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    formats?: formatsUpdateOneWithoutBookNestedInput
    languages?: languagesUpdateOneRequiredWithoutBookNestedInput
    publishers?: publishersUpdateOneRequiredWithoutBookNestedInput
    book_authors?: book_authorsUpdateManyWithoutBookNestedInput
    book_categories?: book_categoriesUpdateManyWithoutBookNestedInput
    covers?: coversUpdateManyWithoutBookNestedInput
  }

  export type booksUncheckedUpdateWithoutBindingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    formatId?: NullableIntFieldUpdateOperationsInput | number | null
    languageId?: IntFieldUpdateOperationsInput | number
    publisherId?: IntFieldUpdateOperationsInput | number
    book_authors?: book_authorsUncheckedUpdateManyWithoutBookNestedInput
    book_categories?: book_categoriesUncheckedUpdateManyWithoutBookNestedInput
    covers?: coversUncheckedUpdateManyWithoutBookNestedInput
  }

  export type booksUncheckedUpdateManyWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    formatId?: NullableIntFieldUpdateOperationsInput | number | null
    languageId?: IntFieldUpdateOperationsInput | number
    publisherId?: IntFieldUpdateOperationsInput | number
  }

  export type booksCreateManyFormatsInput = {
    id?: number
    title: string
    summary: string
    year: string
    bindingId: number
    languageId: number
    publisherId: number
  }

  export type booksUpdateWithoutFormatsInput = {
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindings?: bindingsUpdateOneRequiredWithoutBookNestedInput
    languages?: languagesUpdateOneRequiredWithoutBookNestedInput
    publishers?: publishersUpdateOneRequiredWithoutBookNestedInput
    book_authors?: book_authorsUpdateManyWithoutBookNestedInput
    book_categories?: book_categoriesUpdateManyWithoutBookNestedInput
    covers?: coversUpdateManyWithoutBookNestedInput
  }

  export type booksUncheckedUpdateWithoutFormatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindingId?: IntFieldUpdateOperationsInput | number
    languageId?: IntFieldUpdateOperationsInput | number
    publisherId?: IntFieldUpdateOperationsInput | number
    book_authors?: book_authorsUncheckedUpdateManyWithoutBookNestedInput
    book_categories?: book_categoriesUncheckedUpdateManyWithoutBookNestedInput
    covers?: coversUncheckedUpdateManyWithoutBookNestedInput
  }

  export type booksCreateManyLanguagesInput = {
    id?: number
    title: string
    summary: string
    year: string
    bindingId: number
    formatId?: number | null
    publisherId: number
  }

  export type booksUpdateWithoutLanguagesInput = {
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindings?: bindingsUpdateOneRequiredWithoutBookNestedInput
    formats?: formatsUpdateOneWithoutBookNestedInput
    publishers?: publishersUpdateOneRequiredWithoutBookNestedInput
    book_authors?: book_authorsUpdateManyWithoutBookNestedInput
    book_categories?: book_categoriesUpdateManyWithoutBookNestedInput
    covers?: coversUpdateManyWithoutBookNestedInput
  }

  export type booksUncheckedUpdateWithoutLanguagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindingId?: IntFieldUpdateOperationsInput | number
    formatId?: NullableIntFieldUpdateOperationsInput | number | null
    publisherId?: IntFieldUpdateOperationsInput | number
    book_authors?: book_authorsUncheckedUpdateManyWithoutBookNestedInput
    book_categories?: book_categoriesUncheckedUpdateManyWithoutBookNestedInput
    covers?: coversUncheckedUpdateManyWithoutBookNestedInput
  }

  export type booksCreateManyPublishersInput = {
    id?: number
    title: string
    summary: string
    year: string
    bindingId: number
    formatId?: number | null
    languageId: number
  }

  export type booksUpdateWithoutPublishersInput = {
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindings?: bindingsUpdateOneRequiredWithoutBookNestedInput
    formats?: formatsUpdateOneWithoutBookNestedInput
    languages?: languagesUpdateOneRequiredWithoutBookNestedInput
    book_authors?: book_authorsUpdateManyWithoutBookNestedInput
    book_categories?: book_categoriesUpdateManyWithoutBookNestedInput
    covers?: coversUpdateManyWithoutBookNestedInput
  }

  export type booksUncheckedUpdateWithoutPublishersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    bindingId?: IntFieldUpdateOperationsInput | number
    formatId?: NullableIntFieldUpdateOperationsInput | number | null
    languageId?: IntFieldUpdateOperationsInput | number
    book_authors?: book_authorsUncheckedUpdateManyWithoutBookNestedInput
    book_categories?: book_categoriesUncheckedUpdateManyWithoutBookNestedInput
    covers?: coversUncheckedUpdateManyWithoutBookNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}